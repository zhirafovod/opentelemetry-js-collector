// service: opentelemetry/proto/metrics/v1/metrics.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var opentelemetry_proto_common_v1_common_pb = require('../../../../opentelemetry/proto/common/v1/common_pb.js');
goog.object.extend(proto, opentelemetry_proto_common_v1_common_pb);
var opentelemetry_proto_resource_v1_resource_pb = require('../../../../opentelemetry/proto/resource/v1/resource_pb.js');
goog.object.extend(proto, opentelemetry_proto_resource_v1_resource_pb);
goog.exportSymbol('proto.opentelemetry.proto.metrics.v1.AggregationTemporality', null, global);
goog.exportSymbol('proto.opentelemetry.proto.metrics.v1.DataPointFlags', null, global);
goog.exportSymbol('proto.opentelemetry.proto.metrics.v1.Exemplar', null, global);
goog.exportSymbol('proto.opentelemetry.proto.metrics.v1.Exemplar.ValueCase', null, global);
goog.exportSymbol('proto.opentelemetry.proto.metrics.v1.ExponentialHistogram', null, global);
goog.exportSymbol('proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint', null, global);
goog.exportSymbol('proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets', null, global);
goog.exportSymbol('proto.opentelemetry.proto.metrics.v1.Gauge', null, global);
goog.exportSymbol('proto.opentelemetry.proto.metrics.v1.Histogram', null, global);
goog.exportSymbol('proto.opentelemetry.proto.metrics.v1.HistogramDataPoint', null, global);
goog.exportSymbol('proto.opentelemetry.proto.metrics.v1.Metric', null, global);
goog.exportSymbol('proto.opentelemetry.proto.metrics.v1.Metric.DataCase', null, global);
goog.exportSymbol('proto.opentelemetry.proto.metrics.v1.MetricsData', null, global);
goog.exportSymbol('proto.opentelemetry.proto.metrics.v1.NumberDataPoint', null, global);
goog.exportSymbol('proto.opentelemetry.proto.metrics.v1.NumberDataPoint.ValueCase', null, global);
goog.exportSymbol('proto.opentelemetry.proto.metrics.v1.ResourceMetrics', null, global);
goog.exportSymbol('proto.opentelemetry.proto.metrics.v1.ScopeMetrics', null, global);
goog.exportSymbol('proto.opentelemetry.proto.metrics.v1.Sum', null, global);
goog.exportSymbol('proto.opentelemetry.proto.metrics.v1.Summary', null, global);
goog.exportSymbol('proto.opentelemetry.proto.metrics.v1.SummaryDataPoint', null, global);
goog.exportSymbol('proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.metrics.v1.MetricsData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.metrics.v1.MetricsData.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.metrics.v1.MetricsData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.metrics.v1.MetricsData.displayName = 'proto.opentelemetry.proto.metrics.v1.MetricsData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.metrics.v1.ResourceMetrics = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.metrics.v1.ResourceMetrics.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.metrics.v1.ResourceMetrics, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.metrics.v1.ResourceMetrics.displayName = 'proto.opentelemetry.proto.metrics.v1.ResourceMetrics';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.metrics.v1.ScopeMetrics = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.metrics.v1.ScopeMetrics.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.metrics.v1.ScopeMetrics, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.metrics.v1.ScopeMetrics.displayName = 'proto.opentelemetry.proto.metrics.v1.ScopeMetrics';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.metrics.v1.Metric = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.metrics.v1.Metric.repeatedFields_, proto.opentelemetry.proto.metrics.v1.Metric.oneofGroups_);
};
goog.inherits(proto.opentelemetry.proto.metrics.v1.Metric, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.metrics.v1.Metric.displayName = 'proto.opentelemetry.proto.metrics.v1.Metric';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.metrics.v1.Gauge = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.metrics.v1.Gauge.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.metrics.v1.Gauge, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.metrics.v1.Gauge.displayName = 'proto.opentelemetry.proto.metrics.v1.Gauge';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.metrics.v1.Sum = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.metrics.v1.Sum.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.metrics.v1.Sum, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.metrics.v1.Sum.displayName = 'proto.opentelemetry.proto.metrics.v1.Sum';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.metrics.v1.Histogram = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.metrics.v1.Histogram.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.metrics.v1.Histogram, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.metrics.v1.Histogram.displayName = 'proto.opentelemetry.proto.metrics.v1.Histogram';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogram = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.metrics.v1.ExponentialHistogram.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.metrics.v1.ExponentialHistogram, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.metrics.v1.ExponentialHistogram.displayName = 'proto.opentelemetry.proto.metrics.v1.ExponentialHistogram';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.metrics.v1.Summary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.metrics.v1.Summary.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.metrics.v1.Summary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.metrics.v1.Summary.displayName = 'proto.opentelemetry.proto.metrics.v1.Summary';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.metrics.v1.NumberDataPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.metrics.v1.NumberDataPoint.repeatedFields_, proto.opentelemetry.proto.metrics.v1.NumberDataPoint.oneofGroups_);
};
goog.inherits(proto.opentelemetry.proto.metrics.v1.NumberDataPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.metrics.v1.NumberDataPoint.displayName = 'proto.opentelemetry.proto.metrics.v1.NumberDataPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.metrics.v1.HistogramDataPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.metrics.v1.HistogramDataPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.displayName = 'proto.opentelemetry.proto.metrics.v1.HistogramDataPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.displayName = 'proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.displayName = 'proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.metrics.v1.SummaryDataPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.metrics.v1.SummaryDataPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.displayName = 'proto.opentelemetry.proto.metrics.v1.SummaryDataPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.displayName = 'proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.metrics.v1.Exemplar = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.metrics.v1.Exemplar.repeatedFields_, proto.opentelemetry.proto.metrics.v1.Exemplar.oneofGroups_);
};
goog.inherits(proto.opentelemetry.proto.metrics.v1.Exemplar, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.metrics.v1.Exemplar.displayName = 'proto.opentelemetry.proto.metrics.v1.Exemplar';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.metrics.v1.MetricsData.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.metrics.v1.MetricsData.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.metrics.v1.MetricsData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.metrics.v1.MetricsData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.MetricsData.toObject = function(includeInstance, msg) {
  var f, obj = {
    resourceMetricsList: jspb.Message.toObjectList(msg.getResourceMetricsList(),
    proto.opentelemetry.proto.metrics.v1.ResourceMetrics.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.metrics.v1.MetricsData}
 */
proto.opentelemetry.proto.metrics.v1.MetricsData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.metrics.v1.MetricsData;
  return proto.opentelemetry.proto.metrics.v1.MetricsData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.metrics.v1.MetricsData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.metrics.v1.MetricsData}
 */
proto.opentelemetry.proto.metrics.v1.MetricsData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opentelemetry.proto.metrics.v1.ResourceMetrics;
      reader.readMessage(value,proto.opentelemetry.proto.metrics.v1.ResourceMetrics.deserializeBinaryFromReader);
      msg.addResourceMetrics(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.metrics.v1.MetricsData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.metrics.v1.MetricsData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.metrics.v1.MetricsData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.MetricsData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResourceMetricsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.opentelemetry.proto.metrics.v1.ResourceMetrics.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ResourceMetrics resource_metrics = 1;
 * @return {!Array<!proto.opentelemetry.proto.metrics.v1.ResourceMetrics>}
 */
proto.opentelemetry.proto.metrics.v1.MetricsData.prototype.getResourceMetricsList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.metrics.v1.ResourceMetrics>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.metrics.v1.ResourceMetrics, 1));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.metrics.v1.ResourceMetrics>} value
 * @return {!proto.opentelemetry.proto.metrics.v1.MetricsData} returns this
*/
proto.opentelemetry.proto.metrics.v1.MetricsData.prototype.setResourceMetricsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.opentelemetry.proto.metrics.v1.ResourceMetrics=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.metrics.v1.ResourceMetrics}
 */
proto.opentelemetry.proto.metrics.v1.MetricsData.prototype.addResourceMetrics = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.opentelemetry.proto.metrics.v1.ResourceMetrics, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.v1.MetricsData} returns this
 */
proto.opentelemetry.proto.metrics.v1.MetricsData.prototype.clearResourceMetricsList = function() {
  return this.setResourceMetricsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.metrics.v1.ResourceMetrics.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.metrics.v1.ResourceMetrics.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.metrics.v1.ResourceMetrics.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.metrics.v1.ResourceMetrics} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.ResourceMetrics.toObject = function(includeInstance, msg) {
  var f, obj = {
    resource: (f = msg.getResource()) && opentelemetry_proto_resource_v1_resource_pb.Resource.toObject(includeInstance, f),
    scopeMetricsList: jspb.Message.toObjectList(msg.getScopeMetricsList(),
    proto.opentelemetry.proto.metrics.v1.ScopeMetrics.toObject, includeInstance),
    schemaUrl: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.metrics.v1.ResourceMetrics}
 */
proto.opentelemetry.proto.metrics.v1.ResourceMetrics.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.metrics.v1.ResourceMetrics;
  return proto.opentelemetry.proto.metrics.v1.ResourceMetrics.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.metrics.v1.ResourceMetrics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.metrics.v1.ResourceMetrics}
 */
proto.opentelemetry.proto.metrics.v1.ResourceMetrics.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new opentelemetry_proto_resource_v1_resource_pb.Resource;
      reader.readMessage(value,opentelemetry_proto_resource_v1_resource_pb.Resource.deserializeBinaryFromReader);
      msg.setResource(value);
      break;
    case 2:
      var value = new proto.opentelemetry.proto.metrics.v1.ScopeMetrics;
      reader.readMessage(value,proto.opentelemetry.proto.metrics.v1.ScopeMetrics.deserializeBinaryFromReader);
      msg.addScopeMetrics(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchemaUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.metrics.v1.ResourceMetrics.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.metrics.v1.ResourceMetrics.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.metrics.v1.ResourceMetrics} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.ResourceMetrics.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResource();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      opentelemetry_proto_resource_v1_resource_pb.Resource.serializeBinaryToWriter
    );
  }
  f = message.getScopeMetricsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.opentelemetry.proto.metrics.v1.ScopeMetrics.serializeBinaryToWriter
    );
  }
  f = message.getSchemaUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional opentelemetry.proto.resource.v1.Resource resource = 1;
 * @return {?proto.opentelemetry.proto.resource.v1.Resource}
 */
proto.opentelemetry.proto.metrics.v1.ResourceMetrics.prototype.getResource = function() {
  return /** @type{?proto.opentelemetry.proto.resource.v1.Resource} */ (
    jspb.Message.getWrapperField(this, opentelemetry_proto_resource_v1_resource_pb.Resource, 1));
};


/**
 * @param {?proto.opentelemetry.proto.resource.v1.Resource|undefined} value
 * @return {!proto.opentelemetry.proto.metrics.v1.ResourceMetrics} returns this
*/
proto.opentelemetry.proto.metrics.v1.ResourceMetrics.prototype.setResource = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opentelemetry.proto.metrics.v1.ResourceMetrics} returns this
 */
proto.opentelemetry.proto.metrics.v1.ResourceMetrics.prototype.clearResource = function() {
  return this.setResource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.metrics.v1.ResourceMetrics.prototype.hasResource = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ScopeMetrics scope_metrics = 2;
 * @return {!Array<!proto.opentelemetry.proto.metrics.v1.ScopeMetrics>}
 */
proto.opentelemetry.proto.metrics.v1.ResourceMetrics.prototype.getScopeMetricsList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.metrics.v1.ScopeMetrics>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.metrics.v1.ScopeMetrics, 2));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.metrics.v1.ScopeMetrics>} value
 * @return {!proto.opentelemetry.proto.metrics.v1.ResourceMetrics} returns this
*/
proto.opentelemetry.proto.metrics.v1.ResourceMetrics.prototype.setScopeMetricsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.opentelemetry.proto.metrics.v1.ScopeMetrics=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.metrics.v1.ScopeMetrics}
 */
proto.opentelemetry.proto.metrics.v1.ResourceMetrics.prototype.addScopeMetrics = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.opentelemetry.proto.metrics.v1.ScopeMetrics, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.v1.ResourceMetrics} returns this
 */
proto.opentelemetry.proto.metrics.v1.ResourceMetrics.prototype.clearScopeMetricsList = function() {
  return this.setScopeMetricsList([]);
};


/**
 * optional string schema_url = 3;
 * @return {string}
 */
proto.opentelemetry.proto.metrics.v1.ResourceMetrics.prototype.getSchemaUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.opentelemetry.proto.metrics.v1.ResourceMetrics} returns this
 */
proto.opentelemetry.proto.metrics.v1.ResourceMetrics.prototype.setSchemaUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.metrics.v1.ScopeMetrics.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.metrics.v1.ScopeMetrics.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.metrics.v1.ScopeMetrics.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.metrics.v1.ScopeMetrics} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.ScopeMetrics.toObject = function(includeInstance, msg) {
  var f, obj = {
    scope: (f = msg.getScope()) && opentelemetry_proto_common_v1_common_pb.InstrumentationScope.toObject(includeInstance, f),
    metricsList: jspb.Message.toObjectList(msg.getMetricsList(),
    proto.opentelemetry.proto.metrics.v1.Metric.toObject, includeInstance),
    schemaUrl: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.metrics.v1.ScopeMetrics}
 */
proto.opentelemetry.proto.metrics.v1.ScopeMetrics.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.metrics.v1.ScopeMetrics;
  return proto.opentelemetry.proto.metrics.v1.ScopeMetrics.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.metrics.v1.ScopeMetrics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.metrics.v1.ScopeMetrics}
 */
proto.opentelemetry.proto.metrics.v1.ScopeMetrics.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new opentelemetry_proto_common_v1_common_pb.InstrumentationScope;
      reader.readMessage(value,opentelemetry_proto_common_v1_common_pb.InstrumentationScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    case 2:
      var value = new proto.opentelemetry.proto.metrics.v1.Metric;
      reader.readMessage(value,proto.opentelemetry.proto.metrics.v1.Metric.deserializeBinaryFromReader);
      msg.addMetrics(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchemaUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.metrics.v1.ScopeMetrics.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.metrics.v1.ScopeMetrics.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.metrics.v1.ScopeMetrics} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.ScopeMetrics.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScope();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      opentelemetry_proto_common_v1_common_pb.InstrumentationScope.serializeBinaryToWriter
    );
  }
  f = message.getMetricsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.opentelemetry.proto.metrics.v1.Metric.serializeBinaryToWriter
    );
  }
  f = message.getSchemaUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional opentelemetry.proto.common.v1.InstrumentationScope scope = 1;
 * @return {?proto.opentelemetry.proto.common.v1.InstrumentationScope}
 */
proto.opentelemetry.proto.metrics.v1.ScopeMetrics.prototype.getScope = function() {
  return /** @type{?proto.opentelemetry.proto.common.v1.InstrumentationScope} */ (
    jspb.Message.getWrapperField(this, opentelemetry_proto_common_v1_common_pb.InstrumentationScope, 1));
};


/**
 * @param {?proto.opentelemetry.proto.common.v1.InstrumentationScope|undefined} value
 * @return {!proto.opentelemetry.proto.metrics.v1.ScopeMetrics} returns this
*/
proto.opentelemetry.proto.metrics.v1.ScopeMetrics.prototype.setScope = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opentelemetry.proto.metrics.v1.ScopeMetrics} returns this
 */
proto.opentelemetry.proto.metrics.v1.ScopeMetrics.prototype.clearScope = function() {
  return this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.metrics.v1.ScopeMetrics.prototype.hasScope = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Metric metrics = 2;
 * @return {!Array<!proto.opentelemetry.proto.metrics.v1.Metric>}
 */
proto.opentelemetry.proto.metrics.v1.ScopeMetrics.prototype.getMetricsList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.metrics.v1.Metric>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.metrics.v1.Metric, 2));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.metrics.v1.Metric>} value
 * @return {!proto.opentelemetry.proto.metrics.v1.ScopeMetrics} returns this
*/
proto.opentelemetry.proto.metrics.v1.ScopeMetrics.prototype.setMetricsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.opentelemetry.proto.metrics.v1.Metric=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.metrics.v1.Metric}
 */
proto.opentelemetry.proto.metrics.v1.ScopeMetrics.prototype.addMetrics = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.opentelemetry.proto.metrics.v1.Metric, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.v1.ScopeMetrics} returns this
 */
proto.opentelemetry.proto.metrics.v1.ScopeMetrics.prototype.clearMetricsList = function() {
  return this.setMetricsList([]);
};


/**
 * optional string schema_url = 3;
 * @return {string}
 */
proto.opentelemetry.proto.metrics.v1.ScopeMetrics.prototype.getSchemaUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.opentelemetry.proto.metrics.v1.ScopeMetrics} returns this
 */
proto.opentelemetry.proto.metrics.v1.ScopeMetrics.prototype.setSchemaUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.metrics.v1.Metric.repeatedFields_ = [12];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.opentelemetry.proto.metrics.v1.Metric.oneofGroups_ = [[5,7,9,10,11]];

/**
 * @enum {number}
 */
proto.opentelemetry.proto.metrics.v1.Metric.DataCase = {
  DATA_NOT_SET: 0,
  GAUGE: 5,
  SUM: 7,
  HISTOGRAM: 9,
  EXPONENTIAL_HISTOGRAM: 10,
  SUMMARY: 11
};

/**
 * @return {proto.opentelemetry.proto.metrics.v1.Metric.DataCase}
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.getDataCase = function() {
  return /** @type {proto.opentelemetry.proto.metrics.v1.Metric.DataCase} */(jspb.Message.computeOneofCase(this, proto.opentelemetry.proto.metrics.v1.Metric.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.metrics.v1.Metric.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.metrics.v1.Metric} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.Metric.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    unit: jspb.Message.getFieldWithDefault(msg, 3, ""),
    gauge: (f = msg.getGauge()) && proto.opentelemetry.proto.metrics.v1.Gauge.toObject(includeInstance, f),
    sum: (f = msg.getSum()) && proto.opentelemetry.proto.metrics.v1.Sum.toObject(includeInstance, f),
    histogram: (f = msg.getHistogram()) && proto.opentelemetry.proto.metrics.v1.Histogram.toObject(includeInstance, f),
    exponentialHistogram: (f = msg.getExponentialHistogram()) && proto.opentelemetry.proto.metrics.v1.ExponentialHistogram.toObject(includeInstance, f),
    summary: (f = msg.getSummary()) && proto.opentelemetry.proto.metrics.v1.Summary.toObject(includeInstance, f),
    metadataList: jspb.Message.toObjectList(msg.getMetadataList(),
    opentelemetry_proto_common_v1_common_pb.KeyValue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.metrics.v1.Metric}
 */
proto.opentelemetry.proto.metrics.v1.Metric.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.metrics.v1.Metric;
  return proto.opentelemetry.proto.metrics.v1.Metric.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.metrics.v1.Metric} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.metrics.v1.Metric}
 */
proto.opentelemetry.proto.metrics.v1.Metric.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnit(value);
      break;
    case 5:
      var value = new proto.opentelemetry.proto.metrics.v1.Gauge;
      reader.readMessage(value,proto.opentelemetry.proto.metrics.v1.Gauge.deserializeBinaryFromReader);
      msg.setGauge(value);
      break;
    case 7:
      var value = new proto.opentelemetry.proto.metrics.v1.Sum;
      reader.readMessage(value,proto.opentelemetry.proto.metrics.v1.Sum.deserializeBinaryFromReader);
      msg.setSum(value);
      break;
    case 9:
      var value = new proto.opentelemetry.proto.metrics.v1.Histogram;
      reader.readMessage(value,proto.opentelemetry.proto.metrics.v1.Histogram.deserializeBinaryFromReader);
      msg.setHistogram(value);
      break;
    case 10:
      var value = new proto.opentelemetry.proto.metrics.v1.ExponentialHistogram;
      reader.readMessage(value,proto.opentelemetry.proto.metrics.v1.ExponentialHistogram.deserializeBinaryFromReader);
      msg.setExponentialHistogram(value);
      break;
    case 11:
      var value = new proto.opentelemetry.proto.metrics.v1.Summary;
      reader.readMessage(value,proto.opentelemetry.proto.metrics.v1.Summary.deserializeBinaryFromReader);
      msg.setSummary(value);
      break;
    case 12:
      var value = new opentelemetry_proto_common_v1_common_pb.KeyValue;
      reader.readMessage(value,opentelemetry_proto_common_v1_common_pb.KeyValue.deserializeBinaryFromReader);
      msg.addMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.metrics.v1.Metric.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.metrics.v1.Metric} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.Metric.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUnit();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGauge();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.opentelemetry.proto.metrics.v1.Gauge.serializeBinaryToWriter
    );
  }
  f = message.getSum();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.opentelemetry.proto.metrics.v1.Sum.serializeBinaryToWriter
    );
  }
  f = message.getHistogram();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.opentelemetry.proto.metrics.v1.Histogram.serializeBinaryToWriter
    );
  }
  f = message.getExponentialHistogram();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.opentelemetry.proto.metrics.v1.ExponentialHistogram.serializeBinaryToWriter
    );
  }
  f = message.getSummary();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.opentelemetry.proto.metrics.v1.Summary.serializeBinaryToWriter
    );
  }
  f = message.getMetadataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      opentelemetry_proto_common_v1_common_pb.KeyValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.opentelemetry.proto.metrics.v1.Metric} returns this
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.opentelemetry.proto.metrics.v1.Metric} returns this
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string unit = 3;
 * @return {string}
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.getUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.opentelemetry.proto.metrics.v1.Metric} returns this
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.setUnit = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Gauge gauge = 5;
 * @return {?proto.opentelemetry.proto.metrics.v1.Gauge}
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.getGauge = function() {
  return /** @type{?proto.opentelemetry.proto.metrics.v1.Gauge} */ (
    jspb.Message.getWrapperField(this, proto.opentelemetry.proto.metrics.v1.Gauge, 5));
};


/**
 * @param {?proto.opentelemetry.proto.metrics.v1.Gauge|undefined} value
 * @return {!proto.opentelemetry.proto.metrics.v1.Metric} returns this
*/
proto.opentelemetry.proto.metrics.v1.Metric.prototype.setGauge = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.opentelemetry.proto.metrics.v1.Metric.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opentelemetry.proto.metrics.v1.Metric} returns this
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.clearGauge = function() {
  return this.setGauge(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.hasGauge = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Sum sum = 7;
 * @return {?proto.opentelemetry.proto.metrics.v1.Sum}
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.getSum = function() {
  return /** @type{?proto.opentelemetry.proto.metrics.v1.Sum} */ (
    jspb.Message.getWrapperField(this, proto.opentelemetry.proto.metrics.v1.Sum, 7));
};


/**
 * @param {?proto.opentelemetry.proto.metrics.v1.Sum|undefined} value
 * @return {!proto.opentelemetry.proto.metrics.v1.Metric} returns this
*/
proto.opentelemetry.proto.metrics.v1.Metric.prototype.setSum = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.opentelemetry.proto.metrics.v1.Metric.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opentelemetry.proto.metrics.v1.Metric} returns this
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.clearSum = function() {
  return this.setSum(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.hasSum = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Histogram histogram = 9;
 * @return {?proto.opentelemetry.proto.metrics.v1.Histogram}
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.getHistogram = function() {
  return /** @type{?proto.opentelemetry.proto.metrics.v1.Histogram} */ (
    jspb.Message.getWrapperField(this, proto.opentelemetry.proto.metrics.v1.Histogram, 9));
};


/**
 * @param {?proto.opentelemetry.proto.metrics.v1.Histogram|undefined} value
 * @return {!proto.opentelemetry.proto.metrics.v1.Metric} returns this
*/
proto.opentelemetry.proto.metrics.v1.Metric.prototype.setHistogram = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.opentelemetry.proto.metrics.v1.Metric.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opentelemetry.proto.metrics.v1.Metric} returns this
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.clearHistogram = function() {
  return this.setHistogram(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.hasHistogram = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional ExponentialHistogram exponential_histogram = 10;
 * @return {?proto.opentelemetry.proto.metrics.v1.ExponentialHistogram}
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.getExponentialHistogram = function() {
  return /** @type{?proto.opentelemetry.proto.metrics.v1.ExponentialHistogram} */ (
    jspb.Message.getWrapperField(this, proto.opentelemetry.proto.metrics.v1.ExponentialHistogram, 10));
};


/**
 * @param {?proto.opentelemetry.proto.metrics.v1.ExponentialHistogram|undefined} value
 * @return {!proto.opentelemetry.proto.metrics.v1.Metric} returns this
*/
proto.opentelemetry.proto.metrics.v1.Metric.prototype.setExponentialHistogram = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.opentelemetry.proto.metrics.v1.Metric.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opentelemetry.proto.metrics.v1.Metric} returns this
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.clearExponentialHistogram = function() {
  return this.setExponentialHistogram(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.hasExponentialHistogram = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Summary summary = 11;
 * @return {?proto.opentelemetry.proto.metrics.v1.Summary}
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.getSummary = function() {
  return /** @type{?proto.opentelemetry.proto.metrics.v1.Summary} */ (
    jspb.Message.getWrapperField(this, proto.opentelemetry.proto.metrics.v1.Summary, 11));
};


/**
 * @param {?proto.opentelemetry.proto.metrics.v1.Summary|undefined} value
 * @return {!proto.opentelemetry.proto.metrics.v1.Metric} returns this
*/
proto.opentelemetry.proto.metrics.v1.Metric.prototype.setSummary = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.opentelemetry.proto.metrics.v1.Metric.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opentelemetry.proto.metrics.v1.Metric} returns this
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.clearSummary = function() {
  return this.setSummary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.hasSummary = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * repeated opentelemetry.proto.common.v1.KeyValue metadata = 12;
 * @return {!Array<!proto.opentelemetry.proto.common.v1.KeyValue>}
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.getMetadataList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.common.v1.KeyValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, opentelemetry_proto_common_v1_common_pb.KeyValue, 12));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.common.v1.KeyValue>} value
 * @return {!proto.opentelemetry.proto.metrics.v1.Metric} returns this
*/
proto.opentelemetry.proto.metrics.v1.Metric.prototype.setMetadataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.opentelemetry.proto.common.v1.KeyValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.common.v1.KeyValue}
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.addMetadata = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.opentelemetry.proto.common.v1.KeyValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.v1.Metric} returns this
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.clearMetadataList = function() {
  return this.setMetadataList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.metrics.v1.Gauge.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.metrics.v1.Gauge.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.metrics.v1.Gauge.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.metrics.v1.Gauge} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.Gauge.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataPointsList: jspb.Message.toObjectList(msg.getDataPointsList(),
    proto.opentelemetry.proto.metrics.v1.NumberDataPoint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.metrics.v1.Gauge}
 */
proto.opentelemetry.proto.metrics.v1.Gauge.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.metrics.v1.Gauge;
  return proto.opentelemetry.proto.metrics.v1.Gauge.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.metrics.v1.Gauge} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.metrics.v1.Gauge}
 */
proto.opentelemetry.proto.metrics.v1.Gauge.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opentelemetry.proto.metrics.v1.NumberDataPoint;
      reader.readMessage(value,proto.opentelemetry.proto.metrics.v1.NumberDataPoint.deserializeBinaryFromReader);
      msg.addDataPoints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.metrics.v1.Gauge.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.metrics.v1.Gauge.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.metrics.v1.Gauge} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.Gauge.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataPointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.opentelemetry.proto.metrics.v1.NumberDataPoint.serializeBinaryToWriter
    );
  }
};


/**
 * repeated NumberDataPoint data_points = 1;
 * @return {!Array<!proto.opentelemetry.proto.metrics.v1.NumberDataPoint>}
 */
proto.opentelemetry.proto.metrics.v1.Gauge.prototype.getDataPointsList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.metrics.v1.NumberDataPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.metrics.v1.NumberDataPoint, 1));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.metrics.v1.NumberDataPoint>} value
 * @return {!proto.opentelemetry.proto.metrics.v1.Gauge} returns this
*/
proto.opentelemetry.proto.metrics.v1.Gauge.prototype.setDataPointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.opentelemetry.proto.metrics.v1.NumberDataPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.metrics.v1.NumberDataPoint}
 */
proto.opentelemetry.proto.metrics.v1.Gauge.prototype.addDataPoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.opentelemetry.proto.metrics.v1.NumberDataPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.v1.Gauge} returns this
 */
proto.opentelemetry.proto.metrics.v1.Gauge.prototype.clearDataPointsList = function() {
  return this.setDataPointsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.metrics.v1.Sum.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.metrics.v1.Sum.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.metrics.v1.Sum.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.metrics.v1.Sum} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.Sum.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataPointsList: jspb.Message.toObjectList(msg.getDataPointsList(),
    proto.opentelemetry.proto.metrics.v1.NumberDataPoint.toObject, includeInstance),
    aggregationTemporality: jspb.Message.getFieldWithDefault(msg, 2, 0),
    isMonotonic: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.metrics.v1.Sum}
 */
proto.opentelemetry.proto.metrics.v1.Sum.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.metrics.v1.Sum;
  return proto.opentelemetry.proto.metrics.v1.Sum.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.metrics.v1.Sum} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.metrics.v1.Sum}
 */
proto.opentelemetry.proto.metrics.v1.Sum.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opentelemetry.proto.metrics.v1.NumberDataPoint;
      reader.readMessage(value,proto.opentelemetry.proto.metrics.v1.NumberDataPoint.deserializeBinaryFromReader);
      msg.addDataPoints(value);
      break;
    case 2:
      var value = /** @type {!proto.opentelemetry.proto.metrics.v1.AggregationTemporality} */ (reader.readEnum());
      msg.setAggregationTemporality(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsMonotonic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.metrics.v1.Sum.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.metrics.v1.Sum.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.metrics.v1.Sum} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.Sum.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataPointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.opentelemetry.proto.metrics.v1.NumberDataPoint.serializeBinaryToWriter
    );
  }
  f = message.getAggregationTemporality();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getIsMonotonic();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * repeated NumberDataPoint data_points = 1;
 * @return {!Array<!proto.opentelemetry.proto.metrics.v1.NumberDataPoint>}
 */
proto.opentelemetry.proto.metrics.v1.Sum.prototype.getDataPointsList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.metrics.v1.NumberDataPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.metrics.v1.NumberDataPoint, 1));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.metrics.v1.NumberDataPoint>} value
 * @return {!proto.opentelemetry.proto.metrics.v1.Sum} returns this
*/
proto.opentelemetry.proto.metrics.v1.Sum.prototype.setDataPointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.opentelemetry.proto.metrics.v1.NumberDataPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.metrics.v1.NumberDataPoint}
 */
proto.opentelemetry.proto.metrics.v1.Sum.prototype.addDataPoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.opentelemetry.proto.metrics.v1.NumberDataPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.v1.Sum} returns this
 */
proto.opentelemetry.proto.metrics.v1.Sum.prototype.clearDataPointsList = function() {
  return this.setDataPointsList([]);
};


/**
 * optional AggregationTemporality aggregation_temporality = 2;
 * @return {!proto.opentelemetry.proto.metrics.v1.AggregationTemporality}
 */
proto.opentelemetry.proto.metrics.v1.Sum.prototype.getAggregationTemporality = function() {
  return /** @type {!proto.opentelemetry.proto.metrics.v1.AggregationTemporality} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.opentelemetry.proto.metrics.v1.AggregationTemporality} value
 * @return {!proto.opentelemetry.proto.metrics.v1.Sum} returns this
 */
proto.opentelemetry.proto.metrics.v1.Sum.prototype.setAggregationTemporality = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional bool is_monotonic = 3;
 * @return {boolean}
 */
proto.opentelemetry.proto.metrics.v1.Sum.prototype.getIsMonotonic = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.opentelemetry.proto.metrics.v1.Sum} returns this
 */
proto.opentelemetry.proto.metrics.v1.Sum.prototype.setIsMonotonic = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.metrics.v1.Histogram.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.metrics.v1.Histogram.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.metrics.v1.Histogram.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.metrics.v1.Histogram} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.Histogram.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataPointsList: jspb.Message.toObjectList(msg.getDataPointsList(),
    proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.toObject, includeInstance),
    aggregationTemporality: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.metrics.v1.Histogram}
 */
proto.opentelemetry.proto.metrics.v1.Histogram.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.metrics.v1.Histogram;
  return proto.opentelemetry.proto.metrics.v1.Histogram.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.metrics.v1.Histogram} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.metrics.v1.Histogram}
 */
proto.opentelemetry.proto.metrics.v1.Histogram.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opentelemetry.proto.metrics.v1.HistogramDataPoint;
      reader.readMessage(value,proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.deserializeBinaryFromReader);
      msg.addDataPoints(value);
      break;
    case 2:
      var value = /** @type {!proto.opentelemetry.proto.metrics.v1.AggregationTemporality} */ (reader.readEnum());
      msg.setAggregationTemporality(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.metrics.v1.Histogram.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.metrics.v1.Histogram.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.metrics.v1.Histogram} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.Histogram.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataPointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.serializeBinaryToWriter
    );
  }
  f = message.getAggregationTemporality();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * repeated HistogramDataPoint data_points = 1;
 * @return {!Array<!proto.opentelemetry.proto.metrics.v1.HistogramDataPoint>}
 */
proto.opentelemetry.proto.metrics.v1.Histogram.prototype.getDataPointsList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.metrics.v1.HistogramDataPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.metrics.v1.HistogramDataPoint, 1));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.metrics.v1.HistogramDataPoint>} value
 * @return {!proto.opentelemetry.proto.metrics.v1.Histogram} returns this
*/
proto.opentelemetry.proto.metrics.v1.Histogram.prototype.setDataPointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.opentelemetry.proto.metrics.v1.HistogramDataPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.metrics.v1.HistogramDataPoint}
 */
proto.opentelemetry.proto.metrics.v1.Histogram.prototype.addDataPoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.opentelemetry.proto.metrics.v1.HistogramDataPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.v1.Histogram} returns this
 */
proto.opentelemetry.proto.metrics.v1.Histogram.prototype.clearDataPointsList = function() {
  return this.setDataPointsList([]);
};


/**
 * optional AggregationTemporality aggregation_temporality = 2;
 * @return {!proto.opentelemetry.proto.metrics.v1.AggregationTemporality}
 */
proto.opentelemetry.proto.metrics.v1.Histogram.prototype.getAggregationTemporality = function() {
  return /** @type {!proto.opentelemetry.proto.metrics.v1.AggregationTemporality} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.opentelemetry.proto.metrics.v1.AggregationTemporality} value
 * @return {!proto.opentelemetry.proto.metrics.v1.Histogram} returns this
 */
proto.opentelemetry.proto.metrics.v1.Histogram.prototype.setAggregationTemporality = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogram.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogram.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.metrics.v1.ExponentialHistogram.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.metrics.v1.ExponentialHistogram} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogram.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataPointsList: jspb.Message.toObjectList(msg.getDataPointsList(),
    proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.toObject, includeInstance),
    aggregationTemporality: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.metrics.v1.ExponentialHistogram}
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogram.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.metrics.v1.ExponentialHistogram;
  return proto.opentelemetry.proto.metrics.v1.ExponentialHistogram.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.metrics.v1.ExponentialHistogram} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.metrics.v1.ExponentialHistogram}
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogram.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint;
      reader.readMessage(value,proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.deserializeBinaryFromReader);
      msg.addDataPoints(value);
      break;
    case 2:
      var value = /** @type {!proto.opentelemetry.proto.metrics.v1.AggregationTemporality} */ (reader.readEnum());
      msg.setAggregationTemporality(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogram.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.metrics.v1.ExponentialHistogram.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.metrics.v1.ExponentialHistogram} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogram.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataPointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.serializeBinaryToWriter
    );
  }
  f = message.getAggregationTemporality();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * repeated ExponentialHistogramDataPoint data_points = 1;
 * @return {!Array<!proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint>}
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogram.prototype.getDataPointsList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint, 1));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint>} value
 * @return {!proto.opentelemetry.proto.metrics.v1.ExponentialHistogram} returns this
*/
proto.opentelemetry.proto.metrics.v1.ExponentialHistogram.prototype.setDataPointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint}
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogram.prototype.addDataPoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.v1.ExponentialHistogram} returns this
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogram.prototype.clearDataPointsList = function() {
  return this.setDataPointsList([]);
};


/**
 * optional AggregationTemporality aggregation_temporality = 2;
 * @return {!proto.opentelemetry.proto.metrics.v1.AggregationTemporality}
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogram.prototype.getAggregationTemporality = function() {
  return /** @type {!proto.opentelemetry.proto.metrics.v1.AggregationTemporality} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.opentelemetry.proto.metrics.v1.AggregationTemporality} value
 * @return {!proto.opentelemetry.proto.metrics.v1.ExponentialHistogram} returns this
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogram.prototype.setAggregationTemporality = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.metrics.v1.Summary.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.metrics.v1.Summary.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.metrics.v1.Summary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.metrics.v1.Summary} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.Summary.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataPointsList: jspb.Message.toObjectList(msg.getDataPointsList(),
    proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.metrics.v1.Summary}
 */
proto.opentelemetry.proto.metrics.v1.Summary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.metrics.v1.Summary;
  return proto.opentelemetry.proto.metrics.v1.Summary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.metrics.v1.Summary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.metrics.v1.Summary}
 */
proto.opentelemetry.proto.metrics.v1.Summary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opentelemetry.proto.metrics.v1.SummaryDataPoint;
      reader.readMessage(value,proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.deserializeBinaryFromReader);
      msg.addDataPoints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.metrics.v1.Summary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.metrics.v1.Summary.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.metrics.v1.Summary} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.Summary.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataPointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SummaryDataPoint data_points = 1;
 * @return {!Array<!proto.opentelemetry.proto.metrics.v1.SummaryDataPoint>}
 */
proto.opentelemetry.proto.metrics.v1.Summary.prototype.getDataPointsList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.metrics.v1.SummaryDataPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.metrics.v1.SummaryDataPoint, 1));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.metrics.v1.SummaryDataPoint>} value
 * @return {!proto.opentelemetry.proto.metrics.v1.Summary} returns this
*/
proto.opentelemetry.proto.metrics.v1.Summary.prototype.setDataPointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.opentelemetry.proto.metrics.v1.SummaryDataPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.metrics.v1.SummaryDataPoint}
 */
proto.opentelemetry.proto.metrics.v1.Summary.prototype.addDataPoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.opentelemetry.proto.metrics.v1.SummaryDataPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.v1.Summary} returns this
 */
proto.opentelemetry.proto.metrics.v1.Summary.prototype.clearDataPointsList = function() {
  return this.setDataPointsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.metrics.v1.NumberDataPoint.repeatedFields_ = [7,5];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.opentelemetry.proto.metrics.v1.NumberDataPoint.oneofGroups_ = [[4,6]];

/**
 * @enum {number}
 */
proto.opentelemetry.proto.metrics.v1.NumberDataPoint.ValueCase = {
  VALUE_NOT_SET: 0,
  AS_DOUBLE: 4,
  AS_INT: 6
};

/**
 * @return {proto.opentelemetry.proto.metrics.v1.NumberDataPoint.ValueCase}
 */
proto.opentelemetry.proto.metrics.v1.NumberDataPoint.prototype.getValueCase = function() {
  return /** @type {proto.opentelemetry.proto.metrics.v1.NumberDataPoint.ValueCase} */(jspb.Message.computeOneofCase(this, proto.opentelemetry.proto.metrics.v1.NumberDataPoint.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.metrics.v1.NumberDataPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.metrics.v1.NumberDataPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.metrics.v1.NumberDataPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.NumberDataPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    attributesList: jspb.Message.toObjectList(msg.getAttributesList(),
    opentelemetry_proto_common_v1_common_pb.KeyValue.toObject, includeInstance),
    startTimeUnixNano: jspb.Message.getFieldWithDefault(msg, 2, 0),
    timeUnixNano: jspb.Message.getFieldWithDefault(msg, 3, 0),
    asDouble: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    asInt: jspb.Message.getFieldWithDefault(msg, 6, 0),
    exemplarsList: jspb.Message.toObjectList(msg.getExemplarsList(),
    proto.opentelemetry.proto.metrics.v1.Exemplar.toObject, includeInstance),
    flags: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.metrics.v1.NumberDataPoint}
 */
proto.opentelemetry.proto.metrics.v1.NumberDataPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.metrics.v1.NumberDataPoint;
  return proto.opentelemetry.proto.metrics.v1.NumberDataPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.metrics.v1.NumberDataPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.metrics.v1.NumberDataPoint}
 */
proto.opentelemetry.proto.metrics.v1.NumberDataPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 7:
      var value = new opentelemetry_proto_common_v1_common_pb.KeyValue;
      reader.readMessage(value,opentelemetry_proto_common_v1_common_pb.KeyValue.deserializeBinaryFromReader);
      msg.addAttributes(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setStartTimeUnixNano(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setTimeUnixNano(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAsDouble(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readSfixed64());
      msg.setAsInt(value);
      break;
    case 5:
      var value = new proto.opentelemetry.proto.metrics.v1.Exemplar;
      reader.readMessage(value,proto.opentelemetry.proto.metrics.v1.Exemplar.deserializeBinaryFromReader);
      msg.addExemplars(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.metrics.v1.NumberDataPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.metrics.v1.NumberDataPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.metrics.v1.NumberDataPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.NumberDataPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttributesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      opentelemetry_proto_common_v1_common_pb.KeyValue.serializeBinaryToWriter
    );
  }
  f = message.getStartTimeUnixNano();
  if (f !== 0) {
    writer.writeFixed64(
      2,
      f
    );
  }
  f = message.getTimeUnixNano();
  if (f !== 0) {
    writer.writeFixed64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeSfixed64(
      6,
      f
    );
  }
  f = message.getExemplarsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.opentelemetry.proto.metrics.v1.Exemplar.serializeBinaryToWriter
    );
  }
  f = message.getFlags();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
};


/**
 * repeated opentelemetry.proto.common.v1.KeyValue attributes = 7;
 * @return {!Array<!proto.opentelemetry.proto.common.v1.KeyValue>}
 */
proto.opentelemetry.proto.metrics.v1.NumberDataPoint.prototype.getAttributesList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.common.v1.KeyValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, opentelemetry_proto_common_v1_common_pb.KeyValue, 7));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.common.v1.KeyValue>} value
 * @return {!proto.opentelemetry.proto.metrics.v1.NumberDataPoint} returns this
*/
proto.opentelemetry.proto.metrics.v1.NumberDataPoint.prototype.setAttributesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.opentelemetry.proto.common.v1.KeyValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.common.v1.KeyValue}
 */
proto.opentelemetry.proto.metrics.v1.NumberDataPoint.prototype.addAttributes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.opentelemetry.proto.common.v1.KeyValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.v1.NumberDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.NumberDataPoint.prototype.clearAttributesList = function() {
  return this.setAttributesList([]);
};


/**
 * optional fixed64 start_time_unix_nano = 2;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.NumberDataPoint.prototype.getStartTimeUnixNano = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.NumberDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.NumberDataPoint.prototype.setStartTimeUnixNano = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed64 time_unix_nano = 3;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.NumberDataPoint.prototype.getTimeUnixNano = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.NumberDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.NumberDataPoint.prototype.setTimeUnixNano = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional double as_double = 4;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.NumberDataPoint.prototype.getAsDouble = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.NumberDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.NumberDataPoint.prototype.setAsDouble = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.opentelemetry.proto.metrics.v1.NumberDataPoint.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.opentelemetry.proto.metrics.v1.NumberDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.NumberDataPoint.prototype.clearAsDouble = function() {
  return jspb.Message.setOneofField(this, 4, proto.opentelemetry.proto.metrics.v1.NumberDataPoint.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.metrics.v1.NumberDataPoint.prototype.hasAsDouble = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional sfixed64 as_int = 6;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.NumberDataPoint.prototype.getAsInt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.NumberDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.NumberDataPoint.prototype.setAsInt = function(value) {
  return jspb.Message.setOneofField(this, 6, proto.opentelemetry.proto.metrics.v1.NumberDataPoint.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.opentelemetry.proto.metrics.v1.NumberDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.NumberDataPoint.prototype.clearAsInt = function() {
  return jspb.Message.setOneofField(this, 6, proto.opentelemetry.proto.metrics.v1.NumberDataPoint.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.metrics.v1.NumberDataPoint.prototype.hasAsInt = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated Exemplar exemplars = 5;
 * @return {!Array<!proto.opentelemetry.proto.metrics.v1.Exemplar>}
 */
proto.opentelemetry.proto.metrics.v1.NumberDataPoint.prototype.getExemplarsList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.metrics.v1.Exemplar>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.metrics.v1.Exemplar, 5));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.metrics.v1.Exemplar>} value
 * @return {!proto.opentelemetry.proto.metrics.v1.NumberDataPoint} returns this
*/
proto.opentelemetry.proto.metrics.v1.NumberDataPoint.prototype.setExemplarsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.opentelemetry.proto.metrics.v1.Exemplar=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.metrics.v1.Exemplar}
 */
proto.opentelemetry.proto.metrics.v1.NumberDataPoint.prototype.addExemplars = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.opentelemetry.proto.metrics.v1.Exemplar, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.v1.NumberDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.NumberDataPoint.prototype.clearExemplarsList = function() {
  return this.setExemplarsList([]);
};


/**
 * optional uint32 flags = 8;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.NumberDataPoint.prototype.getFlags = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.NumberDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.NumberDataPoint.prototype.setFlags = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.repeatedFields_ = [9,6,7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.metrics.v1.HistogramDataPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    attributesList: jspb.Message.toObjectList(msg.getAttributesList(),
    opentelemetry_proto_common_v1_common_pb.KeyValue.toObject, includeInstance),
    startTimeUnixNano: jspb.Message.getFieldWithDefault(msg, 2, 0),
    timeUnixNano: jspb.Message.getFieldWithDefault(msg, 3, 0),
    count: jspb.Message.getFieldWithDefault(msg, 4, 0),
    sum: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    bucketCountsList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    explicitBoundsList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 7)) == null ? undefined : f,
    exemplarsList: jspb.Message.toObjectList(msg.getExemplarsList(),
    proto.opentelemetry.proto.metrics.v1.Exemplar.toObject, includeInstance),
    flags: jspb.Message.getFieldWithDefault(msg, 10, 0),
    min: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
    max: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.metrics.v1.HistogramDataPoint}
 */
proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.metrics.v1.HistogramDataPoint;
  return proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.metrics.v1.HistogramDataPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.metrics.v1.HistogramDataPoint}
 */
proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 9:
      var value = new opentelemetry_proto_common_v1_common_pb.KeyValue;
      reader.readMessage(value,opentelemetry_proto_common_v1_common_pb.KeyValue.deserializeBinaryFromReader);
      msg.addAttributes(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setStartTimeUnixNano(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setTimeUnixNano(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setCount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSum(value);
      break;
    case 6:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFixed64() : [reader.readFixed64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addBucketCounts(values[i]);
      }
      break;
    case 7:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addExplicitBounds(values[i]);
      }
      break;
    case 8:
      var value = new proto.opentelemetry.proto.metrics.v1.Exemplar;
      reader.readMessage(value,proto.opentelemetry.proto.metrics.v1.Exemplar.deserializeBinaryFromReader);
      msg.addExemplars(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlags(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMin(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMax(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.metrics.v1.HistogramDataPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttributesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      opentelemetry_proto_common_v1_common_pb.KeyValue.serializeBinaryToWriter
    );
  }
  f = message.getStartTimeUnixNano();
  if (f !== 0) {
    writer.writeFixed64(
      2,
      f
    );
  }
  f = message.getTimeUnixNano();
  if (f !== 0) {
    writer.writeFixed64(
      3,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeFixed64(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getBucketCountsList();
  if (f.length > 0) {
    writer.writePackedFixed64(
      6,
      f
    );
  }
  f = message.getExplicitBoundsList();
  if (f.length > 0) {
    writer.writePackedDouble(
      7,
      f
    );
  }
  f = message.getExemplarsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.opentelemetry.proto.metrics.v1.Exemplar.serializeBinaryToWriter
    );
  }
  f = message.getFlags();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeDouble(
      12,
      f
    );
  }
};


/**
 * repeated opentelemetry.proto.common.v1.KeyValue attributes = 9;
 * @return {!Array<!proto.opentelemetry.proto.common.v1.KeyValue>}
 */
proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.prototype.getAttributesList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.common.v1.KeyValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, opentelemetry_proto_common_v1_common_pb.KeyValue, 9));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.common.v1.KeyValue>} value
 * @return {!proto.opentelemetry.proto.metrics.v1.HistogramDataPoint} returns this
*/
proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.prototype.setAttributesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.opentelemetry.proto.common.v1.KeyValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.common.v1.KeyValue}
 */
proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.prototype.addAttributes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.opentelemetry.proto.common.v1.KeyValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.v1.HistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.prototype.clearAttributesList = function() {
  return this.setAttributesList([]);
};


/**
 * optional fixed64 start_time_unix_nano = 2;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.prototype.getStartTimeUnixNano = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.HistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.prototype.setStartTimeUnixNano = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed64 time_unix_nano = 3;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.prototype.getTimeUnixNano = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.HistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.prototype.setTimeUnixNano = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed64 count = 4;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.HistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional double sum = 5;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.prototype.getSum = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.HistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.prototype.setSum = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.opentelemetry.proto.metrics.v1.HistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.prototype.clearSum = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.prototype.hasSum = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated fixed64 bucket_counts = 6;
 * @return {!Array<number>}
 */
proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.prototype.getBucketCountsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.opentelemetry.proto.metrics.v1.HistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.prototype.setBucketCountsList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.metrics.v1.HistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.prototype.addBucketCounts = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.v1.HistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.prototype.clearBucketCountsList = function() {
  return this.setBucketCountsList([]);
};


/**
 * repeated double explicit_bounds = 7;
 * @return {!Array<number>}
 */
proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.prototype.getExplicitBoundsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 7));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.opentelemetry.proto.metrics.v1.HistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.prototype.setExplicitBoundsList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.metrics.v1.HistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.prototype.addExplicitBounds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.v1.HistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.prototype.clearExplicitBoundsList = function() {
  return this.setExplicitBoundsList([]);
};


/**
 * repeated Exemplar exemplars = 8;
 * @return {!Array<!proto.opentelemetry.proto.metrics.v1.Exemplar>}
 */
proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.prototype.getExemplarsList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.metrics.v1.Exemplar>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.metrics.v1.Exemplar, 8));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.metrics.v1.Exemplar>} value
 * @return {!proto.opentelemetry.proto.metrics.v1.HistogramDataPoint} returns this
*/
proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.prototype.setExemplarsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.opentelemetry.proto.metrics.v1.Exemplar=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.metrics.v1.Exemplar}
 */
proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.prototype.addExemplars = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.opentelemetry.proto.metrics.v1.Exemplar, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.v1.HistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.prototype.clearExemplarsList = function() {
  return this.setExemplarsList([]);
};


/**
 * optional uint32 flags = 10;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.prototype.getFlags = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.HistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.prototype.setFlags = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional double min = 11;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.prototype.getMin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.HistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.prototype.setMin = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.opentelemetry.proto.metrics.v1.HistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.prototype.clearMin = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.prototype.hasMin = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional double max = 12;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.prototype.getMax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.HistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.prototype.setMax = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.opentelemetry.proto.metrics.v1.HistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.prototype.clearMax = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.metrics.v1.HistogramDataPoint.prototype.hasMax = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.repeatedFields_ = [1,11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    attributesList: jspb.Message.toObjectList(msg.getAttributesList(),
    opentelemetry_proto_common_v1_common_pb.KeyValue.toObject, includeInstance),
    startTimeUnixNano: jspb.Message.getFieldWithDefault(msg, 2, 0),
    timeUnixNano: jspb.Message.getFieldWithDefault(msg, 3, 0),
    count: jspb.Message.getFieldWithDefault(msg, 4, 0),
    sum: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    scale: jspb.Message.getFieldWithDefault(msg, 6, 0),
    zeroCount: jspb.Message.getFieldWithDefault(msg, 7, 0),
    positive: (f = msg.getPositive()) && proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.toObject(includeInstance, f),
    negative: (f = msg.getNegative()) && proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.toObject(includeInstance, f),
    flags: jspb.Message.getFieldWithDefault(msg, 10, 0),
    exemplarsList: jspb.Message.toObjectList(msg.getExemplarsList(),
    proto.opentelemetry.proto.metrics.v1.Exemplar.toObject, includeInstance),
    min: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.0),
    max: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 0.0),
    zeroThreshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint}
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint;
  return proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint}
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new opentelemetry_proto_common_v1_common_pb.KeyValue;
      reader.readMessage(value,opentelemetry_proto_common_v1_common_pb.KeyValue.deserializeBinaryFromReader);
      msg.addAttributes(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setStartTimeUnixNano(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setTimeUnixNano(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setCount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSum(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setScale(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setZeroCount(value);
      break;
    case 8:
      var value = new proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets;
      reader.readMessage(value,proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.deserializeBinaryFromReader);
      msg.setPositive(value);
      break;
    case 9:
      var value = new proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets;
      reader.readMessage(value,proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.deserializeBinaryFromReader);
      msg.setNegative(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlags(value);
      break;
    case 11:
      var value = new proto.opentelemetry.proto.metrics.v1.Exemplar;
      reader.readMessage(value,proto.opentelemetry.proto.metrics.v1.Exemplar.deserializeBinaryFromReader);
      msg.addExemplars(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMin(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMax(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setZeroThreshold(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttributesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      opentelemetry_proto_common_v1_common_pb.KeyValue.serializeBinaryToWriter
    );
  }
  f = message.getStartTimeUnixNano();
  if (f !== 0) {
    writer.writeFixed64(
      2,
      f
    );
  }
  f = message.getTimeUnixNano();
  if (f !== 0) {
    writer.writeFixed64(
      3,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeFixed64(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getScale();
  if (f !== 0) {
    writer.writeSint32(
      6,
      f
    );
  }
  f = message.getZeroCount();
  if (f !== 0) {
    writer.writeFixed64(
      7,
      f
    );
  }
  f = message.getPositive();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.serializeBinaryToWriter
    );
  }
  f = message.getNegative();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.serializeBinaryToWriter
    );
  }
  f = message.getFlags();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = message.getExemplarsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.opentelemetry.proto.metrics.v1.Exemplar.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = message.getZeroThreshold();
  if (f !== 0.0) {
    writer.writeDouble(
      14,
      f
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.toObject = function(includeInstance, msg) {
  var f, obj = {
    offset: jspb.Message.getFieldWithDefault(msg, 1, 0),
    bucketCountsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets}
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets;
  return proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets}
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setOffset(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint64() : [reader.readUint64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addBucketCounts(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOffset();
  if (f !== 0) {
    writer.writeSint32(
      1,
      f
    );
  }
  f = message.getBucketCountsList();
  if (f.length > 0) {
    writer.writePackedUint64(
      2,
      f
    );
  }
};


/**
 * optional sint32 offset = 1;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets} returns this
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated uint64 bucket_counts = 2;
 * @return {!Array<number>}
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.prototype.getBucketCountsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets} returns this
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.prototype.setBucketCountsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets} returns this
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.prototype.addBucketCounts = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets} returns this
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.prototype.clearBucketCountsList = function() {
  return this.setBucketCountsList([]);
};


/**
 * repeated opentelemetry.proto.common.v1.KeyValue attributes = 1;
 * @return {!Array<!proto.opentelemetry.proto.common.v1.KeyValue>}
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.prototype.getAttributesList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.common.v1.KeyValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, opentelemetry_proto_common_v1_common_pb.KeyValue, 1));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.common.v1.KeyValue>} value
 * @return {!proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} returns this
*/
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.prototype.setAttributesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.opentelemetry.proto.common.v1.KeyValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.common.v1.KeyValue}
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.prototype.addAttributes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.opentelemetry.proto.common.v1.KeyValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.prototype.clearAttributesList = function() {
  return this.setAttributesList([]);
};


/**
 * optional fixed64 start_time_unix_nano = 2;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.prototype.getStartTimeUnixNano = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.prototype.setStartTimeUnixNano = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed64 time_unix_nano = 3;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.prototype.getTimeUnixNano = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.prototype.setTimeUnixNano = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed64 count = 4;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional double sum = 5;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.prototype.getSum = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.prototype.setSum = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.prototype.clearSum = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.prototype.hasSum = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional sint32 scale = 6;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.prototype.getScale = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.prototype.setScale = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional fixed64 zero_count = 7;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.prototype.getZeroCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.prototype.setZeroCount = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional Buckets positive = 8;
 * @return {?proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets}
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.prototype.getPositive = function() {
  return /** @type{?proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets} */ (
    jspb.Message.getWrapperField(this, proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets, 8));
};


/**
 * @param {?proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets|undefined} value
 * @return {!proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} returns this
*/
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.prototype.setPositive = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.prototype.clearPositive = function() {
  return this.setPositive(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.prototype.hasPositive = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Buckets negative = 9;
 * @return {?proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets}
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.prototype.getNegative = function() {
  return /** @type{?proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets} */ (
    jspb.Message.getWrapperField(this, proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets, 9));
};


/**
 * @param {?proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets|undefined} value
 * @return {!proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} returns this
*/
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.prototype.setNegative = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.prototype.clearNegative = function() {
  return this.setNegative(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.prototype.hasNegative = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional uint32 flags = 10;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.prototype.getFlags = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.prototype.setFlags = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * repeated Exemplar exemplars = 11;
 * @return {!Array<!proto.opentelemetry.proto.metrics.v1.Exemplar>}
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.prototype.getExemplarsList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.metrics.v1.Exemplar>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.metrics.v1.Exemplar, 11));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.metrics.v1.Exemplar>} value
 * @return {!proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} returns this
*/
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.prototype.setExemplarsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.opentelemetry.proto.metrics.v1.Exemplar=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.metrics.v1.Exemplar}
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.prototype.addExemplars = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.opentelemetry.proto.metrics.v1.Exemplar, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.prototype.clearExemplarsList = function() {
  return this.setExemplarsList([]);
};


/**
 * optional double min = 12;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.prototype.getMin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.prototype.setMin = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.prototype.clearMin = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.prototype.hasMin = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional double max = 13;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.prototype.getMax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.prototype.setMax = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.prototype.clearMax = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.prototype.hasMax = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional double zero_threshold = 14;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.prototype.getZeroThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.prototype.setZeroThreshold = function(value) {
  return jspb.Message.setProto3FloatField(this, 14, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.repeatedFields_ = [7,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.metrics.v1.SummaryDataPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    attributesList: jspb.Message.toObjectList(msg.getAttributesList(),
    opentelemetry_proto_common_v1_common_pb.KeyValue.toObject, includeInstance),
    startTimeUnixNano: jspb.Message.getFieldWithDefault(msg, 2, 0),
    timeUnixNano: jspb.Message.getFieldWithDefault(msg, 3, 0),
    count: jspb.Message.getFieldWithDefault(msg, 4, 0),
    sum: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    quantileValuesList: jspb.Message.toObjectList(msg.getQuantileValuesList(),
    proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.toObject, includeInstance),
    flags: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.metrics.v1.SummaryDataPoint}
 */
proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.metrics.v1.SummaryDataPoint;
  return proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.metrics.v1.SummaryDataPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.metrics.v1.SummaryDataPoint}
 */
proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 7:
      var value = new opentelemetry_proto_common_v1_common_pb.KeyValue;
      reader.readMessage(value,opentelemetry_proto_common_v1_common_pb.KeyValue.deserializeBinaryFromReader);
      msg.addAttributes(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setStartTimeUnixNano(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setTimeUnixNano(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setCount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSum(value);
      break;
    case 6:
      var value = new proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile;
      reader.readMessage(value,proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.deserializeBinaryFromReader);
      msg.addQuantileValues(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.metrics.v1.SummaryDataPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttributesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      opentelemetry_proto_common_v1_common_pb.KeyValue.serializeBinaryToWriter
    );
  }
  f = message.getStartTimeUnixNano();
  if (f !== 0) {
    writer.writeFixed64(
      2,
      f
    );
  }
  f = message.getTimeUnixNano();
  if (f !== 0) {
    writer.writeFixed64(
      3,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeFixed64(
      4,
      f
    );
  }
  f = message.getSum();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getQuantileValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.serializeBinaryToWriter
    );
  }
  f = message.getFlags();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.toObject = function(includeInstance, msg) {
  var f, obj = {
    quantile: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    value: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile}
 */
proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile;
  return proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile}
 */
proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setQuantile(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuantile();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double quantile = 1;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.prototype.getQuantile = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile} returns this
 */
proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.prototype.setQuantile = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double value = 2;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile} returns this
 */
proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.prototype.setValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * repeated opentelemetry.proto.common.v1.KeyValue attributes = 7;
 * @return {!Array<!proto.opentelemetry.proto.common.v1.KeyValue>}
 */
proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.prototype.getAttributesList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.common.v1.KeyValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, opentelemetry_proto_common_v1_common_pb.KeyValue, 7));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.common.v1.KeyValue>} value
 * @return {!proto.opentelemetry.proto.metrics.v1.SummaryDataPoint} returns this
*/
proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.prototype.setAttributesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.opentelemetry.proto.common.v1.KeyValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.common.v1.KeyValue}
 */
proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.prototype.addAttributes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.opentelemetry.proto.common.v1.KeyValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.v1.SummaryDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.prototype.clearAttributesList = function() {
  return this.setAttributesList([]);
};


/**
 * optional fixed64 start_time_unix_nano = 2;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.prototype.getStartTimeUnixNano = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.SummaryDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.prototype.setStartTimeUnixNano = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed64 time_unix_nano = 3;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.prototype.getTimeUnixNano = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.SummaryDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.prototype.setTimeUnixNano = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed64 count = 4;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.SummaryDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional double sum = 5;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.prototype.getSum = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.SummaryDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.prototype.setSum = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * repeated ValueAtQuantile quantile_values = 6;
 * @return {!Array<!proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile>}
 */
proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.prototype.getQuantileValuesList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile, 6));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile>} value
 * @return {!proto.opentelemetry.proto.metrics.v1.SummaryDataPoint} returns this
*/
proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.prototype.setQuantileValuesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile}
 */
proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.prototype.addQuantileValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.v1.SummaryDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.prototype.clearQuantileValuesList = function() {
  return this.setQuantileValuesList([]);
};


/**
 * optional uint32 flags = 8;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.prototype.getFlags = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.SummaryDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.SummaryDataPoint.prototype.setFlags = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.metrics.v1.Exemplar.repeatedFields_ = [7];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.opentelemetry.proto.metrics.v1.Exemplar.oneofGroups_ = [[3,6]];

/**
 * @enum {number}
 */
proto.opentelemetry.proto.metrics.v1.Exemplar.ValueCase = {
  VALUE_NOT_SET: 0,
  AS_DOUBLE: 3,
  AS_INT: 6
};

/**
 * @return {proto.opentelemetry.proto.metrics.v1.Exemplar.ValueCase}
 */
proto.opentelemetry.proto.metrics.v1.Exemplar.prototype.getValueCase = function() {
  return /** @type {proto.opentelemetry.proto.metrics.v1.Exemplar.ValueCase} */(jspb.Message.computeOneofCase(this, proto.opentelemetry.proto.metrics.v1.Exemplar.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.metrics.v1.Exemplar.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.metrics.v1.Exemplar.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.metrics.v1.Exemplar} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.Exemplar.toObject = function(includeInstance, msg) {
  var f, obj = {
    filteredAttributesList: jspb.Message.toObjectList(msg.getFilteredAttributesList(),
    opentelemetry_proto_common_v1_common_pb.KeyValue.toObject, includeInstance),
    timeUnixNano: jspb.Message.getFieldWithDefault(msg, 2, 0),
    asDouble: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    asInt: jspb.Message.getFieldWithDefault(msg, 6, 0),
    spanId: msg.getSpanId_asB64(),
    traceId: msg.getTraceId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.metrics.v1.Exemplar}
 */
proto.opentelemetry.proto.metrics.v1.Exemplar.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.metrics.v1.Exemplar;
  return proto.opentelemetry.proto.metrics.v1.Exemplar.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.metrics.v1.Exemplar} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.metrics.v1.Exemplar}
 */
proto.opentelemetry.proto.metrics.v1.Exemplar.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 7:
      var value = new opentelemetry_proto_common_v1_common_pb.KeyValue;
      reader.readMessage(value,opentelemetry_proto_common_v1_common_pb.KeyValue.deserializeBinaryFromReader);
      msg.addFilteredAttributes(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setTimeUnixNano(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAsDouble(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readSfixed64());
      msg.setAsInt(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSpanId(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTraceId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.metrics.v1.Exemplar.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.metrics.v1.Exemplar.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.metrics.v1.Exemplar} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.Exemplar.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilteredAttributesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      opentelemetry_proto_common_v1_common_pb.KeyValue.serializeBinaryToWriter
    );
  }
  f = message.getTimeUnixNano();
  if (f !== 0) {
    writer.writeFixed64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeSfixed64(
      6,
      f
    );
  }
  f = message.getSpanId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getTraceId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * repeated opentelemetry.proto.common.v1.KeyValue filtered_attributes = 7;
 * @return {!Array<!proto.opentelemetry.proto.common.v1.KeyValue>}
 */
proto.opentelemetry.proto.metrics.v1.Exemplar.prototype.getFilteredAttributesList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.common.v1.KeyValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, opentelemetry_proto_common_v1_common_pb.KeyValue, 7));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.common.v1.KeyValue>} value
 * @return {!proto.opentelemetry.proto.metrics.v1.Exemplar} returns this
*/
proto.opentelemetry.proto.metrics.v1.Exemplar.prototype.setFilteredAttributesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.opentelemetry.proto.common.v1.KeyValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.common.v1.KeyValue}
 */
proto.opentelemetry.proto.metrics.v1.Exemplar.prototype.addFilteredAttributes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.opentelemetry.proto.common.v1.KeyValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.v1.Exemplar} returns this
 */
proto.opentelemetry.proto.metrics.v1.Exemplar.prototype.clearFilteredAttributesList = function() {
  return this.setFilteredAttributesList([]);
};


/**
 * optional fixed64 time_unix_nano = 2;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.Exemplar.prototype.getTimeUnixNano = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.Exemplar} returns this
 */
proto.opentelemetry.proto.metrics.v1.Exemplar.prototype.setTimeUnixNano = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional double as_double = 3;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.Exemplar.prototype.getAsDouble = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.Exemplar} returns this
 */
proto.opentelemetry.proto.metrics.v1.Exemplar.prototype.setAsDouble = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.opentelemetry.proto.metrics.v1.Exemplar.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.opentelemetry.proto.metrics.v1.Exemplar} returns this
 */
proto.opentelemetry.proto.metrics.v1.Exemplar.prototype.clearAsDouble = function() {
  return jspb.Message.setOneofField(this, 3, proto.opentelemetry.proto.metrics.v1.Exemplar.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.metrics.v1.Exemplar.prototype.hasAsDouble = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional sfixed64 as_int = 6;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.Exemplar.prototype.getAsInt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.Exemplar} returns this
 */
proto.opentelemetry.proto.metrics.v1.Exemplar.prototype.setAsInt = function(value) {
  return jspb.Message.setOneofField(this, 6, proto.opentelemetry.proto.metrics.v1.Exemplar.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.opentelemetry.proto.metrics.v1.Exemplar} returns this
 */
proto.opentelemetry.proto.metrics.v1.Exemplar.prototype.clearAsInt = function() {
  return jspb.Message.setOneofField(this, 6, proto.opentelemetry.proto.metrics.v1.Exemplar.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.metrics.v1.Exemplar.prototype.hasAsInt = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bytes span_id = 4;
 * @return {string}
 */
proto.opentelemetry.proto.metrics.v1.Exemplar.prototype.getSpanId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes span_id = 4;
 * This is a type-conversion wrapper around `getSpanId()`
 * @return {string}
 */
proto.opentelemetry.proto.metrics.v1.Exemplar.prototype.getSpanId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSpanId()));
};


/**
 * optional bytes span_id = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSpanId()`
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.metrics.v1.Exemplar.prototype.getSpanId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSpanId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.opentelemetry.proto.metrics.v1.Exemplar} returns this
 */
proto.opentelemetry.proto.metrics.v1.Exemplar.prototype.setSpanId = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes trace_id = 5;
 * @return {string}
 */
proto.opentelemetry.proto.metrics.v1.Exemplar.prototype.getTraceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes trace_id = 5;
 * This is a type-conversion wrapper around `getTraceId()`
 * @return {string}
 */
proto.opentelemetry.proto.metrics.v1.Exemplar.prototype.getTraceId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTraceId()));
};


/**
 * optional bytes trace_id = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTraceId()`
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.metrics.v1.Exemplar.prototype.getTraceId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTraceId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.opentelemetry.proto.metrics.v1.Exemplar} returns this
 */
proto.opentelemetry.proto.metrics.v1.Exemplar.prototype.setTraceId = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * @enum {number}
 */
proto.opentelemetry.proto.metrics.v1.AggregationTemporality = {
  AGGREGATION_TEMPORALITY_UNSPECIFIED: 0,
  AGGREGATION_TEMPORALITY_DELTA: 1,
  AGGREGATION_TEMPORALITY_CUMULATIVE: 2
};

/**
 * @enum {number}
 */
proto.opentelemetry.proto.metrics.v1.DataPointFlags = {
  DATA_POINT_FLAGS_DO_NOT_USE: 0,
  DATA_POINT_FLAGS_NO_RECORDED_VALUE_MASK: 1
};

goog.object.extend(exports, proto.opentelemetry.proto.metrics.v1);
