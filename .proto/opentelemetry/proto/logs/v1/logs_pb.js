// service: opentelemetry/proto/logs/v1/logs.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var opentelemetry_proto_common_v1_common_pb = require('../../../../opentelemetry/proto/common/v1/common_pb.js');
goog.object.extend(proto, opentelemetry_proto_common_v1_common_pb);
var opentelemetry_proto_resource_v1_resource_pb = require('../../../../opentelemetry/proto/resource/v1/resource_pb.js');
goog.object.extend(proto, opentelemetry_proto_resource_v1_resource_pb);
goog.exportSymbol('proto.opentelemetry.proto.logs.v1.LogRecord', null, global);
goog.exportSymbol('proto.opentelemetry.proto.logs.v1.LogRecordFlags', null, global);
goog.exportSymbol('proto.opentelemetry.proto.logs.v1.LogsData', null, global);
goog.exportSymbol('proto.opentelemetry.proto.logs.v1.ResourceLogs', null, global);
goog.exportSymbol('proto.opentelemetry.proto.logs.v1.ScopeLogs', null, global);
goog.exportSymbol('proto.opentelemetry.proto.logs.v1.SeverityNumber', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.logs.v1.LogsData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.logs.v1.LogsData.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.logs.v1.LogsData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.logs.v1.LogsData.displayName = 'proto.opentelemetry.proto.logs.v1.LogsData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.logs.v1.ResourceLogs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.logs.v1.ResourceLogs.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.logs.v1.ResourceLogs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.logs.v1.ResourceLogs.displayName = 'proto.opentelemetry.proto.logs.v1.ResourceLogs';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.logs.v1.ScopeLogs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.logs.v1.ScopeLogs.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.logs.v1.ScopeLogs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.logs.v1.ScopeLogs.displayName = 'proto.opentelemetry.proto.logs.v1.ScopeLogs';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.logs.v1.LogRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.logs.v1.LogRecord.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.logs.v1.LogRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.logs.v1.LogRecord.displayName = 'proto.opentelemetry.proto.logs.v1.LogRecord';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.logs.v1.LogsData.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.logs.v1.LogsData.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.logs.v1.LogsData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.logs.v1.LogsData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.logs.v1.LogsData.toObject = function(includeInstance, msg) {
  var f, obj = {
    resourceLogsList: jspb.Message.toObjectList(msg.getResourceLogsList(),
    proto.opentelemetry.proto.logs.v1.ResourceLogs.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.logs.v1.LogsData}
 */
proto.opentelemetry.proto.logs.v1.LogsData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.logs.v1.LogsData;
  return proto.opentelemetry.proto.logs.v1.LogsData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.logs.v1.LogsData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.logs.v1.LogsData}
 */
proto.opentelemetry.proto.logs.v1.LogsData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opentelemetry.proto.logs.v1.ResourceLogs;
      reader.readMessage(value,proto.opentelemetry.proto.logs.v1.ResourceLogs.deserializeBinaryFromReader);
      msg.addResourceLogs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.logs.v1.LogsData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.logs.v1.LogsData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.logs.v1.LogsData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.logs.v1.LogsData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResourceLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.opentelemetry.proto.logs.v1.ResourceLogs.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ResourceLogs resource_logs = 1;
 * @return {!Array<!proto.opentelemetry.proto.logs.v1.ResourceLogs>}
 */
proto.opentelemetry.proto.logs.v1.LogsData.prototype.getResourceLogsList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.logs.v1.ResourceLogs>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.logs.v1.ResourceLogs, 1));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.logs.v1.ResourceLogs>} value
 * @return {!proto.opentelemetry.proto.logs.v1.LogsData} returns this
*/
proto.opentelemetry.proto.logs.v1.LogsData.prototype.setResourceLogsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.opentelemetry.proto.logs.v1.ResourceLogs=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.logs.v1.ResourceLogs}
 */
proto.opentelemetry.proto.logs.v1.LogsData.prototype.addResourceLogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.opentelemetry.proto.logs.v1.ResourceLogs, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.logs.v1.LogsData} returns this
 */
proto.opentelemetry.proto.logs.v1.LogsData.prototype.clearResourceLogsList = function() {
  return this.setResourceLogsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.logs.v1.ResourceLogs.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.logs.v1.ResourceLogs.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.logs.v1.ResourceLogs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.logs.v1.ResourceLogs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.logs.v1.ResourceLogs.toObject = function(includeInstance, msg) {
  var f, obj = {
    resource: (f = msg.getResource()) && opentelemetry_proto_resource_v1_resource_pb.Resource.toObject(includeInstance, f),
    scopeLogsList: jspb.Message.toObjectList(msg.getScopeLogsList(),
    proto.opentelemetry.proto.logs.v1.ScopeLogs.toObject, includeInstance),
    schemaUrl: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.logs.v1.ResourceLogs}
 */
proto.opentelemetry.proto.logs.v1.ResourceLogs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.logs.v1.ResourceLogs;
  return proto.opentelemetry.proto.logs.v1.ResourceLogs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.logs.v1.ResourceLogs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.logs.v1.ResourceLogs}
 */
proto.opentelemetry.proto.logs.v1.ResourceLogs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new opentelemetry_proto_resource_v1_resource_pb.Resource;
      reader.readMessage(value,opentelemetry_proto_resource_v1_resource_pb.Resource.deserializeBinaryFromReader);
      msg.setResource(value);
      break;
    case 2:
      var value = new proto.opentelemetry.proto.logs.v1.ScopeLogs;
      reader.readMessage(value,proto.opentelemetry.proto.logs.v1.ScopeLogs.deserializeBinaryFromReader);
      msg.addScopeLogs(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchemaUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.logs.v1.ResourceLogs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.logs.v1.ResourceLogs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.logs.v1.ResourceLogs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.logs.v1.ResourceLogs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResource();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      opentelemetry_proto_resource_v1_resource_pb.Resource.serializeBinaryToWriter
    );
  }
  f = message.getScopeLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.opentelemetry.proto.logs.v1.ScopeLogs.serializeBinaryToWriter
    );
  }
  f = message.getSchemaUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional opentelemetry.proto.resource.v1.Resource resource = 1;
 * @return {?proto.opentelemetry.proto.resource.v1.Resource}
 */
proto.opentelemetry.proto.logs.v1.ResourceLogs.prototype.getResource = function() {
  return /** @type{?proto.opentelemetry.proto.resource.v1.Resource} */ (
    jspb.Message.getWrapperField(this, opentelemetry_proto_resource_v1_resource_pb.Resource, 1));
};


/**
 * @param {?proto.opentelemetry.proto.resource.v1.Resource|undefined} value
 * @return {!proto.opentelemetry.proto.logs.v1.ResourceLogs} returns this
*/
proto.opentelemetry.proto.logs.v1.ResourceLogs.prototype.setResource = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opentelemetry.proto.logs.v1.ResourceLogs} returns this
 */
proto.opentelemetry.proto.logs.v1.ResourceLogs.prototype.clearResource = function() {
  return this.setResource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.logs.v1.ResourceLogs.prototype.hasResource = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ScopeLogs scope_logs = 2;
 * @return {!Array<!proto.opentelemetry.proto.logs.v1.ScopeLogs>}
 */
proto.opentelemetry.proto.logs.v1.ResourceLogs.prototype.getScopeLogsList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.logs.v1.ScopeLogs>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.logs.v1.ScopeLogs, 2));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.logs.v1.ScopeLogs>} value
 * @return {!proto.opentelemetry.proto.logs.v1.ResourceLogs} returns this
*/
proto.opentelemetry.proto.logs.v1.ResourceLogs.prototype.setScopeLogsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.opentelemetry.proto.logs.v1.ScopeLogs=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.logs.v1.ScopeLogs}
 */
proto.opentelemetry.proto.logs.v1.ResourceLogs.prototype.addScopeLogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.opentelemetry.proto.logs.v1.ScopeLogs, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.logs.v1.ResourceLogs} returns this
 */
proto.opentelemetry.proto.logs.v1.ResourceLogs.prototype.clearScopeLogsList = function() {
  return this.setScopeLogsList([]);
};


/**
 * optional string schema_url = 3;
 * @return {string}
 */
proto.opentelemetry.proto.logs.v1.ResourceLogs.prototype.getSchemaUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.opentelemetry.proto.logs.v1.ResourceLogs} returns this
 */
proto.opentelemetry.proto.logs.v1.ResourceLogs.prototype.setSchemaUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.logs.v1.ScopeLogs.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.logs.v1.ScopeLogs.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.logs.v1.ScopeLogs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.logs.v1.ScopeLogs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.logs.v1.ScopeLogs.toObject = function(includeInstance, msg) {
  var f, obj = {
    scope: (f = msg.getScope()) && opentelemetry_proto_common_v1_common_pb.InstrumentationScope.toObject(includeInstance, f),
    logRecordsList: jspb.Message.toObjectList(msg.getLogRecordsList(),
    proto.opentelemetry.proto.logs.v1.LogRecord.toObject, includeInstance),
    schemaUrl: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.logs.v1.ScopeLogs}
 */
proto.opentelemetry.proto.logs.v1.ScopeLogs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.logs.v1.ScopeLogs;
  return proto.opentelemetry.proto.logs.v1.ScopeLogs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.logs.v1.ScopeLogs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.logs.v1.ScopeLogs}
 */
proto.opentelemetry.proto.logs.v1.ScopeLogs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new opentelemetry_proto_common_v1_common_pb.InstrumentationScope;
      reader.readMessage(value,opentelemetry_proto_common_v1_common_pb.InstrumentationScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    case 2:
      var value = new proto.opentelemetry.proto.logs.v1.LogRecord;
      reader.readMessage(value,proto.opentelemetry.proto.logs.v1.LogRecord.deserializeBinaryFromReader);
      msg.addLogRecords(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchemaUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.logs.v1.ScopeLogs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.logs.v1.ScopeLogs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.logs.v1.ScopeLogs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.logs.v1.ScopeLogs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScope();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      opentelemetry_proto_common_v1_common_pb.InstrumentationScope.serializeBinaryToWriter
    );
  }
  f = message.getLogRecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.opentelemetry.proto.logs.v1.LogRecord.serializeBinaryToWriter
    );
  }
  f = message.getSchemaUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional opentelemetry.proto.common.v1.InstrumentationScope scope = 1;
 * @return {?proto.opentelemetry.proto.common.v1.InstrumentationScope}
 */
proto.opentelemetry.proto.logs.v1.ScopeLogs.prototype.getScope = function() {
  return /** @type{?proto.opentelemetry.proto.common.v1.InstrumentationScope} */ (
    jspb.Message.getWrapperField(this, opentelemetry_proto_common_v1_common_pb.InstrumentationScope, 1));
};


/**
 * @param {?proto.opentelemetry.proto.common.v1.InstrumentationScope|undefined} value
 * @return {!proto.opentelemetry.proto.logs.v1.ScopeLogs} returns this
*/
proto.opentelemetry.proto.logs.v1.ScopeLogs.prototype.setScope = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opentelemetry.proto.logs.v1.ScopeLogs} returns this
 */
proto.opentelemetry.proto.logs.v1.ScopeLogs.prototype.clearScope = function() {
  return this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.logs.v1.ScopeLogs.prototype.hasScope = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated LogRecord log_records = 2;
 * @return {!Array<!proto.opentelemetry.proto.logs.v1.LogRecord>}
 */
proto.opentelemetry.proto.logs.v1.ScopeLogs.prototype.getLogRecordsList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.logs.v1.LogRecord>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.logs.v1.LogRecord, 2));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.logs.v1.LogRecord>} value
 * @return {!proto.opentelemetry.proto.logs.v1.ScopeLogs} returns this
*/
proto.opentelemetry.proto.logs.v1.ScopeLogs.prototype.setLogRecordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.opentelemetry.proto.logs.v1.LogRecord=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.logs.v1.LogRecord}
 */
proto.opentelemetry.proto.logs.v1.ScopeLogs.prototype.addLogRecords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.opentelemetry.proto.logs.v1.LogRecord, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.logs.v1.ScopeLogs} returns this
 */
proto.opentelemetry.proto.logs.v1.ScopeLogs.prototype.clearLogRecordsList = function() {
  return this.setLogRecordsList([]);
};


/**
 * optional string schema_url = 3;
 * @return {string}
 */
proto.opentelemetry.proto.logs.v1.ScopeLogs.prototype.getSchemaUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.opentelemetry.proto.logs.v1.ScopeLogs} returns this
 */
proto.opentelemetry.proto.logs.v1.ScopeLogs.prototype.setSchemaUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.logs.v1.LogRecord.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.logs.v1.LogRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.logs.v1.LogRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.logs.v1.LogRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.logs.v1.LogRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
    timeUnixNano: jspb.Message.getFieldWithDefault(msg, 1, 0),
    observedTimeUnixNano: jspb.Message.getFieldWithDefault(msg, 11, 0),
    severityNumber: jspb.Message.getFieldWithDefault(msg, 2, 0),
    severityText: jspb.Message.getFieldWithDefault(msg, 3, ""),
    body: (f = msg.getBody()) && opentelemetry_proto_common_v1_common_pb.AnyValue.toObject(includeInstance, f),
    attributesList: jspb.Message.toObjectList(msg.getAttributesList(),
    opentelemetry_proto_common_v1_common_pb.KeyValue.toObject, includeInstance),
    droppedAttributesCount: jspb.Message.getFieldWithDefault(msg, 7, 0),
    flags: jspb.Message.getFieldWithDefault(msg, 8, 0),
    traceId: msg.getTraceId_asB64(),
    spanId: msg.getSpanId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.logs.v1.LogRecord}
 */
proto.opentelemetry.proto.logs.v1.LogRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.logs.v1.LogRecord;
  return proto.opentelemetry.proto.logs.v1.LogRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.logs.v1.LogRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.logs.v1.LogRecord}
 */
proto.opentelemetry.proto.logs.v1.LogRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setTimeUnixNano(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setObservedTimeUnixNano(value);
      break;
    case 2:
      var value = /** @type {!proto.opentelemetry.proto.logs.v1.SeverityNumber} */ (reader.readEnum());
      msg.setSeverityNumber(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeverityText(value);
      break;
    case 5:
      var value = new opentelemetry_proto_common_v1_common_pb.AnyValue;
      reader.readMessage(value,opentelemetry_proto_common_v1_common_pb.AnyValue.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    case 6:
      var value = new opentelemetry_proto_common_v1_common_pb.KeyValue;
      reader.readMessage(value,opentelemetry_proto_common_v1_common_pb.KeyValue.deserializeBinaryFromReader);
      msg.addAttributes(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDroppedAttributesCount(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setFlags(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTraceId(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSpanId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.logs.v1.LogRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.logs.v1.LogRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.logs.v1.LogRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.logs.v1.LogRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimeUnixNano();
  if (f !== 0) {
    writer.writeFixed64(
      1,
      f
    );
  }
  f = message.getObservedTimeUnixNano();
  if (f !== 0) {
    writer.writeFixed64(
      11,
      f
    );
  }
  f = message.getSeverityNumber();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getSeverityText();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      opentelemetry_proto_common_v1_common_pb.AnyValue.serializeBinaryToWriter
    );
  }
  f = message.getAttributesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      opentelemetry_proto_common_v1_common_pb.KeyValue.serializeBinaryToWriter
    );
  }
  f = message.getDroppedAttributesCount();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getFlags();
  if (f !== 0) {
    writer.writeFixed32(
      8,
      f
    );
  }
  f = message.getTraceId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getSpanId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
};


/**
 * optional fixed64 time_unix_nano = 1;
 * @return {number}
 */
proto.opentelemetry.proto.logs.v1.LogRecord.prototype.getTimeUnixNano = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.logs.v1.LogRecord} returns this
 */
proto.opentelemetry.proto.logs.v1.LogRecord.prototype.setTimeUnixNano = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed64 observed_time_unix_nano = 11;
 * @return {number}
 */
proto.opentelemetry.proto.logs.v1.LogRecord.prototype.getObservedTimeUnixNano = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.logs.v1.LogRecord} returns this
 */
proto.opentelemetry.proto.logs.v1.LogRecord.prototype.setObservedTimeUnixNano = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional SeverityNumber severity_number = 2;
 * @return {!proto.opentelemetry.proto.logs.v1.SeverityNumber}
 */
proto.opentelemetry.proto.logs.v1.LogRecord.prototype.getSeverityNumber = function() {
  return /** @type {!proto.opentelemetry.proto.logs.v1.SeverityNumber} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.opentelemetry.proto.logs.v1.SeverityNumber} value
 * @return {!proto.opentelemetry.proto.logs.v1.LogRecord} returns this
 */
proto.opentelemetry.proto.logs.v1.LogRecord.prototype.setSeverityNumber = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string severity_text = 3;
 * @return {string}
 */
proto.opentelemetry.proto.logs.v1.LogRecord.prototype.getSeverityText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.opentelemetry.proto.logs.v1.LogRecord} returns this
 */
proto.opentelemetry.proto.logs.v1.LogRecord.prototype.setSeverityText = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional opentelemetry.proto.common.v1.AnyValue body = 5;
 * @return {?proto.opentelemetry.proto.common.v1.AnyValue}
 */
proto.opentelemetry.proto.logs.v1.LogRecord.prototype.getBody = function() {
  return /** @type{?proto.opentelemetry.proto.common.v1.AnyValue} */ (
    jspb.Message.getWrapperField(this, opentelemetry_proto_common_v1_common_pb.AnyValue, 5));
};


/**
 * @param {?proto.opentelemetry.proto.common.v1.AnyValue|undefined} value
 * @return {!proto.opentelemetry.proto.logs.v1.LogRecord} returns this
*/
proto.opentelemetry.proto.logs.v1.LogRecord.prototype.setBody = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opentelemetry.proto.logs.v1.LogRecord} returns this
 */
proto.opentelemetry.proto.logs.v1.LogRecord.prototype.clearBody = function() {
  return this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.logs.v1.LogRecord.prototype.hasBody = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated opentelemetry.proto.common.v1.KeyValue attributes = 6;
 * @return {!Array<!proto.opentelemetry.proto.common.v1.KeyValue>}
 */
proto.opentelemetry.proto.logs.v1.LogRecord.prototype.getAttributesList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.common.v1.KeyValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, opentelemetry_proto_common_v1_common_pb.KeyValue, 6));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.common.v1.KeyValue>} value
 * @return {!proto.opentelemetry.proto.logs.v1.LogRecord} returns this
*/
proto.opentelemetry.proto.logs.v1.LogRecord.prototype.setAttributesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.opentelemetry.proto.common.v1.KeyValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.common.v1.KeyValue}
 */
proto.opentelemetry.proto.logs.v1.LogRecord.prototype.addAttributes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.opentelemetry.proto.common.v1.KeyValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.logs.v1.LogRecord} returns this
 */
proto.opentelemetry.proto.logs.v1.LogRecord.prototype.clearAttributesList = function() {
  return this.setAttributesList([]);
};


/**
 * optional uint32 dropped_attributes_count = 7;
 * @return {number}
 */
proto.opentelemetry.proto.logs.v1.LogRecord.prototype.getDroppedAttributesCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.logs.v1.LogRecord} returns this
 */
proto.opentelemetry.proto.logs.v1.LogRecord.prototype.setDroppedAttributesCount = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional fixed32 flags = 8;
 * @return {number}
 */
proto.opentelemetry.proto.logs.v1.LogRecord.prototype.getFlags = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.logs.v1.LogRecord} returns this
 */
proto.opentelemetry.proto.logs.v1.LogRecord.prototype.setFlags = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional bytes trace_id = 9;
 * @return {string}
 */
proto.opentelemetry.proto.logs.v1.LogRecord.prototype.getTraceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes trace_id = 9;
 * This is a type-conversion wrapper around `getTraceId()`
 * @return {string}
 */
proto.opentelemetry.proto.logs.v1.LogRecord.prototype.getTraceId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTraceId()));
};


/**
 * optional bytes trace_id = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTraceId()`
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.logs.v1.LogRecord.prototype.getTraceId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTraceId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.opentelemetry.proto.logs.v1.LogRecord} returns this
 */
proto.opentelemetry.proto.logs.v1.LogRecord.prototype.setTraceId = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional bytes span_id = 10;
 * @return {string}
 */
proto.opentelemetry.proto.logs.v1.LogRecord.prototype.getSpanId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes span_id = 10;
 * This is a type-conversion wrapper around `getSpanId()`
 * @return {string}
 */
proto.opentelemetry.proto.logs.v1.LogRecord.prototype.getSpanId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSpanId()));
};


/**
 * optional bytes span_id = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSpanId()`
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.logs.v1.LogRecord.prototype.getSpanId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSpanId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.opentelemetry.proto.logs.v1.LogRecord} returns this
 */
proto.opentelemetry.proto.logs.v1.LogRecord.prototype.setSpanId = function(value) {
  return jspb.Message.setProto3BytesField(this, 10, value);
};


/**
 * @enum {number}
 */
proto.opentelemetry.proto.logs.v1.SeverityNumber = {
  SEVERITY_NUMBER_UNSPECIFIED: 0,
  SEVERITY_NUMBER_TRACE: 1,
  SEVERITY_NUMBER_TRACE2: 2,
  SEVERITY_NUMBER_TRACE3: 3,
  SEVERITY_NUMBER_TRACE4: 4,
  SEVERITY_NUMBER_DEBUG: 5,
  SEVERITY_NUMBER_DEBUG2: 6,
  SEVERITY_NUMBER_DEBUG3: 7,
  SEVERITY_NUMBER_DEBUG4: 8,
  SEVERITY_NUMBER_INFO: 9,
  SEVERITY_NUMBER_INFO2: 10,
  SEVERITY_NUMBER_INFO3: 11,
  SEVERITY_NUMBER_INFO4: 12,
  SEVERITY_NUMBER_WARN: 13,
  SEVERITY_NUMBER_WARN2: 14,
  SEVERITY_NUMBER_WARN3: 15,
  SEVERITY_NUMBER_WARN4: 16,
  SEVERITY_NUMBER_ERROR: 17,
  SEVERITY_NUMBER_ERROR2: 18,
  SEVERITY_NUMBER_ERROR3: 19,
  SEVERITY_NUMBER_ERROR4: 20,
  SEVERITY_NUMBER_FATAL: 21,
  SEVERITY_NUMBER_FATAL2: 22,
  SEVERITY_NUMBER_FATAL3: 23,
  SEVERITY_NUMBER_FATAL4: 24
};

/**
 * @enum {number}
 */
proto.opentelemetry.proto.logs.v1.LogRecordFlags = {
  LOG_RECORD_FLAGS_DO_NOT_USE: 0,
  LOG_RECORD_FLAGS_TRACE_FLAGS_MASK: 255
};

goog.object.extend(exports, proto.opentelemetry.proto.logs.v1);
