// source: opentelemetry/proto/trace/v1/trace.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var opentelemetry_proto_common_v1_common_pb = require('../../../../opentelemetry/proto/common/v1/common_pb.js');
goog.object.extend(proto, opentelemetry_proto_common_v1_common_pb);
var opentelemetry_proto_resource_v1_resource_pb = require('../../../../opentelemetry/proto/resource/v1/resource_pb.js');
goog.object.extend(proto, opentelemetry_proto_resource_v1_resource_pb);
goog.exportSymbol('proto.opentelemetry.proto.trace.v1.ResourceSpans', null, global);
goog.exportSymbol('proto.opentelemetry.proto.trace.v1.ScopeSpans', null, global);
goog.exportSymbol('proto.opentelemetry.proto.trace.v1.Span', null, global);
goog.exportSymbol('proto.opentelemetry.proto.trace.v1.Span.Event', null, global);
goog.exportSymbol('proto.opentelemetry.proto.trace.v1.Span.Link', null, global);
goog.exportSymbol('proto.opentelemetry.proto.trace.v1.Span.SpanKind', null, global);
goog.exportSymbol('proto.opentelemetry.proto.trace.v1.SpanFlags', null, global);
goog.exportSymbol('proto.opentelemetry.proto.trace.v1.Status', null, global);
goog.exportSymbol('proto.opentelemetry.proto.trace.v1.Status.StatusCode', null, global);
goog.exportSymbol('proto.opentelemetry.proto.trace.v1.TracesData', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.trace.v1.TracesData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.trace.v1.TracesData.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.trace.v1.TracesData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.trace.v1.TracesData.displayName = 'proto.opentelemetry.proto.trace.v1.TracesData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.trace.v1.ResourceSpans = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.trace.v1.ResourceSpans.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.trace.v1.ResourceSpans, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.trace.v1.ResourceSpans.displayName = 'proto.opentelemetry.proto.trace.v1.ResourceSpans';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.trace.v1.ScopeSpans = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.trace.v1.ScopeSpans.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.trace.v1.ScopeSpans, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.trace.v1.ScopeSpans.displayName = 'proto.opentelemetry.proto.trace.v1.ScopeSpans';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.trace.v1.Span = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.trace.v1.Span.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.trace.v1.Span, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.trace.v1.Span.displayName = 'proto.opentelemetry.proto.trace.v1.Span';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.trace.v1.Span.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.trace.v1.Span.Event.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.trace.v1.Span.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.trace.v1.Span.Event.displayName = 'proto.opentelemetry.proto.trace.v1.Span.Event';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.trace.v1.Span.Link = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.trace.v1.Span.Link.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.trace.v1.Span.Link, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.trace.v1.Span.Link.displayName = 'proto.opentelemetry.proto.trace.v1.Span.Link';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.trace.v1.Status = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opentelemetry.proto.trace.v1.Status, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.trace.v1.Status.displayName = 'proto.opentelemetry.proto.trace.v1.Status';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.trace.v1.TracesData.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.trace.v1.TracesData.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.trace.v1.TracesData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.trace.v1.TracesData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.trace.v1.TracesData.toObject = function(includeInstance, msg) {
  var f, obj = {
    resourceSpansList: jspb.Message.toObjectList(msg.getResourceSpansList(),
    proto.opentelemetry.proto.trace.v1.ResourceSpans.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.trace.v1.TracesData}
 */
proto.opentelemetry.proto.trace.v1.TracesData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.trace.v1.TracesData;
  return proto.opentelemetry.proto.trace.v1.TracesData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.trace.v1.TracesData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.trace.v1.TracesData}
 */
proto.opentelemetry.proto.trace.v1.TracesData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opentelemetry.proto.trace.v1.ResourceSpans;
      reader.readMessage(value,proto.opentelemetry.proto.trace.v1.ResourceSpans.deserializeBinaryFromReader);
      msg.addResourceSpans(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.trace.v1.TracesData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.trace.v1.TracesData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.trace.v1.TracesData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.trace.v1.TracesData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResourceSpansList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.opentelemetry.proto.trace.v1.ResourceSpans.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ResourceSpans resource_spans = 1;
 * @return {!Array<!proto.opentelemetry.proto.trace.v1.ResourceSpans>}
 */
proto.opentelemetry.proto.trace.v1.TracesData.prototype.getResourceSpansList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.trace.v1.ResourceSpans>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.trace.v1.ResourceSpans, 1));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.trace.v1.ResourceSpans>} value
 * @return {!proto.opentelemetry.proto.trace.v1.TracesData} returns this
*/
proto.opentelemetry.proto.trace.v1.TracesData.prototype.setResourceSpansList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.opentelemetry.proto.trace.v1.ResourceSpans=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.trace.v1.ResourceSpans}
 */
proto.opentelemetry.proto.trace.v1.TracesData.prototype.addResourceSpans = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.opentelemetry.proto.trace.v1.ResourceSpans, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.trace.v1.TracesData} returns this
 */
proto.opentelemetry.proto.trace.v1.TracesData.prototype.clearResourceSpansList = function() {
  return this.setResourceSpansList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.trace.v1.ResourceSpans.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.trace.v1.ResourceSpans.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.trace.v1.ResourceSpans.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.trace.v1.ResourceSpans} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.trace.v1.ResourceSpans.toObject = function(includeInstance, msg) {
  var f, obj = {
    resource: (f = msg.getResource()) && opentelemetry_proto_resource_v1_resource_pb.Resource.toObject(includeInstance, f),
    scopeSpansList: jspb.Message.toObjectList(msg.getScopeSpansList(),
    proto.opentelemetry.proto.trace.v1.ScopeSpans.toObject, includeInstance),
    schemaUrl: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.trace.v1.ResourceSpans}
 */
proto.opentelemetry.proto.trace.v1.ResourceSpans.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.trace.v1.ResourceSpans;
  return proto.opentelemetry.proto.trace.v1.ResourceSpans.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.trace.v1.ResourceSpans} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.trace.v1.ResourceSpans}
 */
proto.opentelemetry.proto.trace.v1.ResourceSpans.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new opentelemetry_proto_resource_v1_resource_pb.Resource;
      reader.readMessage(value,opentelemetry_proto_resource_v1_resource_pb.Resource.deserializeBinaryFromReader);
      msg.setResource(value);
      break;
    case 2:
      var value = new proto.opentelemetry.proto.trace.v1.ScopeSpans;
      reader.readMessage(value,proto.opentelemetry.proto.trace.v1.ScopeSpans.deserializeBinaryFromReader);
      msg.addScopeSpans(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchemaUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.trace.v1.ResourceSpans.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.trace.v1.ResourceSpans.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.trace.v1.ResourceSpans} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.trace.v1.ResourceSpans.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResource();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      opentelemetry_proto_resource_v1_resource_pb.Resource.serializeBinaryToWriter
    );
  }
  f = message.getScopeSpansList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.opentelemetry.proto.trace.v1.ScopeSpans.serializeBinaryToWriter
    );
  }
  f = message.getSchemaUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional opentelemetry.proto.resource.v1.Resource resource = 1;
 * @return {?proto.opentelemetry.proto.resource.v1.Resource}
 */
proto.opentelemetry.proto.trace.v1.ResourceSpans.prototype.getResource = function() {
  return /** @type{?proto.opentelemetry.proto.resource.v1.Resource} */ (
    jspb.Message.getWrapperField(this, opentelemetry_proto_resource_v1_resource_pb.Resource, 1));
};


/**
 * @param {?proto.opentelemetry.proto.resource.v1.Resource|undefined} value
 * @return {!proto.opentelemetry.proto.trace.v1.ResourceSpans} returns this
*/
proto.opentelemetry.proto.trace.v1.ResourceSpans.prototype.setResource = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opentelemetry.proto.trace.v1.ResourceSpans} returns this
 */
proto.opentelemetry.proto.trace.v1.ResourceSpans.prototype.clearResource = function() {
  return this.setResource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.trace.v1.ResourceSpans.prototype.hasResource = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ScopeSpans scope_spans = 2;
 * @return {!Array<!proto.opentelemetry.proto.trace.v1.ScopeSpans>}
 */
proto.opentelemetry.proto.trace.v1.ResourceSpans.prototype.getScopeSpansList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.trace.v1.ScopeSpans>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.trace.v1.ScopeSpans, 2));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.trace.v1.ScopeSpans>} value
 * @return {!proto.opentelemetry.proto.trace.v1.ResourceSpans} returns this
*/
proto.opentelemetry.proto.trace.v1.ResourceSpans.prototype.setScopeSpansList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.opentelemetry.proto.trace.v1.ScopeSpans=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.trace.v1.ScopeSpans}
 */
proto.opentelemetry.proto.trace.v1.ResourceSpans.prototype.addScopeSpans = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.opentelemetry.proto.trace.v1.ScopeSpans, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.trace.v1.ResourceSpans} returns this
 */
proto.opentelemetry.proto.trace.v1.ResourceSpans.prototype.clearScopeSpansList = function() {
  return this.setScopeSpansList([]);
};


/**
 * optional string schema_url = 3;
 * @return {string}
 */
proto.opentelemetry.proto.trace.v1.ResourceSpans.prototype.getSchemaUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.opentelemetry.proto.trace.v1.ResourceSpans} returns this
 */
proto.opentelemetry.proto.trace.v1.ResourceSpans.prototype.setSchemaUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.trace.v1.ScopeSpans.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.trace.v1.ScopeSpans.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.trace.v1.ScopeSpans.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.trace.v1.ScopeSpans} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.trace.v1.ScopeSpans.toObject = function(includeInstance, msg) {
  var f, obj = {
    scope: (f = msg.getScope()) && opentelemetry_proto_common_v1_common_pb.InstrumentationScope.toObject(includeInstance, f),
    spansList: jspb.Message.toObjectList(msg.getSpansList(),
    proto.opentelemetry.proto.trace.v1.Span.toObject, includeInstance),
    schemaUrl: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.trace.v1.ScopeSpans}
 */
proto.opentelemetry.proto.trace.v1.ScopeSpans.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.trace.v1.ScopeSpans;
  return proto.opentelemetry.proto.trace.v1.ScopeSpans.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.trace.v1.ScopeSpans} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.trace.v1.ScopeSpans}
 */
proto.opentelemetry.proto.trace.v1.ScopeSpans.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new opentelemetry_proto_common_v1_common_pb.InstrumentationScope;
      reader.readMessage(value,opentelemetry_proto_common_v1_common_pb.InstrumentationScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    case 2:
      var value = new proto.opentelemetry.proto.trace.v1.Span;
      reader.readMessage(value,proto.opentelemetry.proto.trace.v1.Span.deserializeBinaryFromReader);
      msg.addSpans(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchemaUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.trace.v1.ScopeSpans.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.trace.v1.ScopeSpans.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.trace.v1.ScopeSpans} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.trace.v1.ScopeSpans.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScope();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      opentelemetry_proto_common_v1_common_pb.InstrumentationScope.serializeBinaryToWriter
    );
  }
  f = message.getSpansList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.opentelemetry.proto.trace.v1.Span.serializeBinaryToWriter
    );
  }
  f = message.getSchemaUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional opentelemetry.proto.common.v1.InstrumentationScope scope = 1;
 * @return {?proto.opentelemetry.proto.common.v1.InstrumentationScope}
 */
proto.opentelemetry.proto.trace.v1.ScopeSpans.prototype.getScope = function() {
  return /** @type{?proto.opentelemetry.proto.common.v1.InstrumentationScope} */ (
    jspb.Message.getWrapperField(this, opentelemetry_proto_common_v1_common_pb.InstrumentationScope, 1));
};


/**
 * @param {?proto.opentelemetry.proto.common.v1.InstrumentationScope|undefined} value
 * @return {!proto.opentelemetry.proto.trace.v1.ScopeSpans} returns this
*/
proto.opentelemetry.proto.trace.v1.ScopeSpans.prototype.setScope = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opentelemetry.proto.trace.v1.ScopeSpans} returns this
 */
proto.opentelemetry.proto.trace.v1.ScopeSpans.prototype.clearScope = function() {
  return this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.trace.v1.ScopeSpans.prototype.hasScope = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Span spans = 2;
 * @return {!Array<!proto.opentelemetry.proto.trace.v1.Span>}
 */
proto.opentelemetry.proto.trace.v1.ScopeSpans.prototype.getSpansList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.trace.v1.Span>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.trace.v1.Span, 2));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.trace.v1.Span>} value
 * @return {!proto.opentelemetry.proto.trace.v1.ScopeSpans} returns this
*/
proto.opentelemetry.proto.trace.v1.ScopeSpans.prototype.setSpansList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.opentelemetry.proto.trace.v1.Span=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.trace.v1.Span}
 */
proto.opentelemetry.proto.trace.v1.ScopeSpans.prototype.addSpans = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.opentelemetry.proto.trace.v1.Span, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.trace.v1.ScopeSpans} returns this
 */
proto.opentelemetry.proto.trace.v1.ScopeSpans.prototype.clearSpansList = function() {
  return this.setSpansList([]);
};


/**
 * optional string schema_url = 3;
 * @return {string}
 */
proto.opentelemetry.proto.trace.v1.ScopeSpans.prototype.getSchemaUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.opentelemetry.proto.trace.v1.ScopeSpans} returns this
 */
proto.opentelemetry.proto.trace.v1.ScopeSpans.prototype.setSchemaUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.trace.v1.Span.repeatedFields_ = [9,11,13];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.trace.v1.Span.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.trace.v1.Span.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.trace.v1.Span} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.trace.v1.Span.toObject = function(includeInstance, msg) {
  var f, obj = {
    traceId: msg.getTraceId_asB64(),
    spanId: msg.getSpanId_asB64(),
    traceState: jspb.Message.getFieldWithDefault(msg, 3, ""),
    parentSpanId: msg.getParentSpanId_asB64(),
    flags: jspb.Message.getFieldWithDefault(msg, 16, 0),
    name: jspb.Message.getFieldWithDefault(msg, 5, ""),
    kind: jspb.Message.getFieldWithDefault(msg, 6, 0),
    startTimeUnixNano: jspb.Message.getFieldWithDefault(msg, 7, 0),
    endTimeUnixNano: jspb.Message.getFieldWithDefault(msg, 8, 0),
    attributesList: jspb.Message.toObjectList(msg.getAttributesList(),
    opentelemetry_proto_common_v1_common_pb.KeyValue.toObject, includeInstance),
    droppedAttributesCount: jspb.Message.getFieldWithDefault(msg, 10, 0),
    eventsList: jspb.Message.toObjectList(msg.getEventsList(),
    proto.opentelemetry.proto.trace.v1.Span.Event.toObject, includeInstance),
    droppedEventsCount: jspb.Message.getFieldWithDefault(msg, 12, 0),
    linksList: jspb.Message.toObjectList(msg.getLinksList(),
    proto.opentelemetry.proto.trace.v1.Span.Link.toObject, includeInstance),
    droppedLinksCount: jspb.Message.getFieldWithDefault(msg, 14, 0),
    status: (f = msg.getStatus()) && proto.opentelemetry.proto.trace.v1.Status.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.trace.v1.Span}
 */
proto.opentelemetry.proto.trace.v1.Span.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.trace.v1.Span;
  return proto.opentelemetry.proto.trace.v1.Span.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.trace.v1.Span} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.trace.v1.Span}
 */
proto.opentelemetry.proto.trace.v1.Span.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTraceId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSpanId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTraceState(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setParentSpanId(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setFlags(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 6:
      var value = /** @type {!proto.opentelemetry.proto.trace.v1.Span.SpanKind} */ (reader.readEnum());
      msg.setKind(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setStartTimeUnixNano(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setEndTimeUnixNano(value);
      break;
    case 9:
      var value = new opentelemetry_proto_common_v1_common_pb.KeyValue;
      reader.readMessage(value,opentelemetry_proto_common_v1_common_pb.KeyValue.deserializeBinaryFromReader);
      msg.addAttributes(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDroppedAttributesCount(value);
      break;
    case 11:
      var value = new proto.opentelemetry.proto.trace.v1.Span.Event;
      reader.readMessage(value,proto.opentelemetry.proto.trace.v1.Span.Event.deserializeBinaryFromReader);
      msg.addEvents(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDroppedEventsCount(value);
      break;
    case 13:
      var value = new proto.opentelemetry.proto.trace.v1.Span.Link;
      reader.readMessage(value,proto.opentelemetry.proto.trace.v1.Span.Link.deserializeBinaryFromReader);
      msg.addLinks(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDroppedLinksCount(value);
      break;
    case 15:
      var value = new proto.opentelemetry.proto.trace.v1.Status;
      reader.readMessage(value,proto.opentelemetry.proto.trace.v1.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.trace.v1.Span.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.trace.v1.Span.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.trace.v1.Span} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.trace.v1.Span.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTraceId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSpanId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getTraceState();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getParentSpanId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getFlags();
  if (f !== 0) {
    writer.writeFixed32(
      16,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getKind();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getStartTimeUnixNano();
  if (f !== 0) {
    writer.writeFixed64(
      7,
      f
    );
  }
  f = message.getEndTimeUnixNano();
  if (f !== 0) {
    writer.writeFixed64(
      8,
      f
    );
  }
  f = message.getAttributesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      opentelemetry_proto_common_v1_common_pb.KeyValue.serializeBinaryToWriter
    );
  }
  f = message.getDroppedAttributesCount();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.opentelemetry.proto.trace.v1.Span.Event.serializeBinaryToWriter
    );
  }
  f = message.getDroppedEventsCount();
  if (f !== 0) {
    writer.writeUint32(
      12,
      f
    );
  }
  f = message.getLinksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      proto.opentelemetry.proto.trace.v1.Span.Link.serializeBinaryToWriter
    );
  }
  f = message.getDroppedLinksCount();
  if (f !== 0) {
    writer.writeUint32(
      14,
      f
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.opentelemetry.proto.trace.v1.Status.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.opentelemetry.proto.trace.v1.Span.SpanKind = {
  SPAN_KIND_UNSPECIFIED: 0,
  SPAN_KIND_INTERNAL: 1,
  SPAN_KIND_SERVER: 2,
  SPAN_KIND_CLIENT: 3,
  SPAN_KIND_PRODUCER: 4,
  SPAN_KIND_CONSUMER: 5
};


/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.trace.v1.Span.Event.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.trace.v1.Span.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.trace.v1.Span.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.trace.v1.Span.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.trace.v1.Span.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    timeUnixNano: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    attributesList: jspb.Message.toObjectList(msg.getAttributesList(),
    opentelemetry_proto_common_v1_common_pb.KeyValue.toObject, includeInstance),
    droppedAttributesCount: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.trace.v1.Span.Event}
 */
proto.opentelemetry.proto.trace.v1.Span.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.trace.v1.Span.Event;
  return proto.opentelemetry.proto.trace.v1.Span.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.trace.v1.Span.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.trace.v1.Span.Event}
 */
proto.opentelemetry.proto.trace.v1.Span.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setTimeUnixNano(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new opentelemetry_proto_common_v1_common_pb.KeyValue;
      reader.readMessage(value,opentelemetry_proto_common_v1_common_pb.KeyValue.deserializeBinaryFromReader);
      msg.addAttributes(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDroppedAttributesCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.trace.v1.Span.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.trace.v1.Span.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.trace.v1.Span.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.trace.v1.Span.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimeUnixNano();
  if (f !== 0) {
    writer.writeFixed64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAttributesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      opentelemetry_proto_common_v1_common_pb.KeyValue.serializeBinaryToWriter
    );
  }
  f = message.getDroppedAttributesCount();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional fixed64 time_unix_nano = 1;
 * @return {number}
 */
proto.opentelemetry.proto.trace.v1.Span.Event.prototype.getTimeUnixNano = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.trace.v1.Span.Event} returns this
 */
proto.opentelemetry.proto.trace.v1.Span.Event.prototype.setTimeUnixNano = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.opentelemetry.proto.trace.v1.Span.Event.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.opentelemetry.proto.trace.v1.Span.Event} returns this
 */
proto.opentelemetry.proto.trace.v1.Span.Event.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated opentelemetry.proto.common.v1.KeyValue attributes = 3;
 * @return {!Array<!proto.opentelemetry.proto.common.v1.KeyValue>}
 */
proto.opentelemetry.proto.trace.v1.Span.Event.prototype.getAttributesList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.common.v1.KeyValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, opentelemetry_proto_common_v1_common_pb.KeyValue, 3));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.common.v1.KeyValue>} value
 * @return {!proto.opentelemetry.proto.trace.v1.Span.Event} returns this
*/
proto.opentelemetry.proto.trace.v1.Span.Event.prototype.setAttributesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.opentelemetry.proto.common.v1.KeyValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.common.v1.KeyValue}
 */
proto.opentelemetry.proto.trace.v1.Span.Event.prototype.addAttributes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.opentelemetry.proto.common.v1.KeyValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.trace.v1.Span.Event} returns this
 */
proto.opentelemetry.proto.trace.v1.Span.Event.prototype.clearAttributesList = function() {
  return this.setAttributesList([]);
};


/**
 * optional uint32 dropped_attributes_count = 4;
 * @return {number}
 */
proto.opentelemetry.proto.trace.v1.Span.Event.prototype.getDroppedAttributesCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.trace.v1.Span.Event} returns this
 */
proto.opentelemetry.proto.trace.v1.Span.Event.prototype.setDroppedAttributesCount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.trace.v1.Span.Link.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.trace.v1.Span.Link.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.trace.v1.Span.Link.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.trace.v1.Span.Link} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.trace.v1.Span.Link.toObject = function(includeInstance, msg) {
  var f, obj = {
    traceId: msg.getTraceId_asB64(),
    spanId: msg.getSpanId_asB64(),
    traceState: jspb.Message.getFieldWithDefault(msg, 3, ""),
    attributesList: jspb.Message.toObjectList(msg.getAttributesList(),
    opentelemetry_proto_common_v1_common_pb.KeyValue.toObject, includeInstance),
    droppedAttributesCount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    flags: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.trace.v1.Span.Link}
 */
proto.opentelemetry.proto.trace.v1.Span.Link.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.trace.v1.Span.Link;
  return proto.opentelemetry.proto.trace.v1.Span.Link.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.trace.v1.Span.Link} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.trace.v1.Span.Link}
 */
proto.opentelemetry.proto.trace.v1.Span.Link.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTraceId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSpanId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTraceState(value);
      break;
    case 4:
      var value = new opentelemetry_proto_common_v1_common_pb.KeyValue;
      reader.readMessage(value,opentelemetry_proto_common_v1_common_pb.KeyValue.deserializeBinaryFromReader);
      msg.addAttributes(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDroppedAttributesCount(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setFlags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.trace.v1.Span.Link.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.trace.v1.Span.Link.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.trace.v1.Span.Link} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.trace.v1.Span.Link.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTraceId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSpanId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getTraceState();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAttributesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      opentelemetry_proto_common_v1_common_pb.KeyValue.serializeBinaryToWriter
    );
  }
  f = message.getDroppedAttributesCount();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getFlags();
  if (f !== 0) {
    writer.writeFixed32(
      6,
      f
    );
  }
};


/**
 * optional bytes trace_id = 1;
 * @return {string}
 */
proto.opentelemetry.proto.trace.v1.Span.Link.prototype.getTraceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes trace_id = 1;
 * This is a type-conversion wrapper around `getTraceId()`
 * @return {string}
 */
proto.opentelemetry.proto.trace.v1.Span.Link.prototype.getTraceId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTraceId()));
};


/**
 * optional bytes trace_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTraceId()`
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.trace.v1.Span.Link.prototype.getTraceId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTraceId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.opentelemetry.proto.trace.v1.Span.Link} returns this
 */
proto.opentelemetry.proto.trace.v1.Span.Link.prototype.setTraceId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes span_id = 2;
 * @return {string}
 */
proto.opentelemetry.proto.trace.v1.Span.Link.prototype.getSpanId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes span_id = 2;
 * This is a type-conversion wrapper around `getSpanId()`
 * @return {string}
 */
proto.opentelemetry.proto.trace.v1.Span.Link.prototype.getSpanId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSpanId()));
};


/**
 * optional bytes span_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSpanId()`
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.trace.v1.Span.Link.prototype.getSpanId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSpanId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.opentelemetry.proto.trace.v1.Span.Link} returns this
 */
proto.opentelemetry.proto.trace.v1.Span.Link.prototype.setSpanId = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string trace_state = 3;
 * @return {string}
 */
proto.opentelemetry.proto.trace.v1.Span.Link.prototype.getTraceState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.opentelemetry.proto.trace.v1.Span.Link} returns this
 */
proto.opentelemetry.proto.trace.v1.Span.Link.prototype.setTraceState = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated opentelemetry.proto.common.v1.KeyValue attributes = 4;
 * @return {!Array<!proto.opentelemetry.proto.common.v1.KeyValue>}
 */
proto.opentelemetry.proto.trace.v1.Span.Link.prototype.getAttributesList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.common.v1.KeyValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, opentelemetry_proto_common_v1_common_pb.KeyValue, 4));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.common.v1.KeyValue>} value
 * @return {!proto.opentelemetry.proto.trace.v1.Span.Link} returns this
*/
proto.opentelemetry.proto.trace.v1.Span.Link.prototype.setAttributesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.opentelemetry.proto.common.v1.KeyValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.common.v1.KeyValue}
 */
proto.opentelemetry.proto.trace.v1.Span.Link.prototype.addAttributes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.opentelemetry.proto.common.v1.KeyValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.trace.v1.Span.Link} returns this
 */
proto.opentelemetry.proto.trace.v1.Span.Link.prototype.clearAttributesList = function() {
  return this.setAttributesList([]);
};


/**
 * optional uint32 dropped_attributes_count = 5;
 * @return {number}
 */
proto.opentelemetry.proto.trace.v1.Span.Link.prototype.getDroppedAttributesCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.trace.v1.Span.Link} returns this
 */
proto.opentelemetry.proto.trace.v1.Span.Link.prototype.setDroppedAttributesCount = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional fixed32 flags = 6;
 * @return {number}
 */
proto.opentelemetry.proto.trace.v1.Span.Link.prototype.getFlags = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.trace.v1.Span.Link} returns this
 */
proto.opentelemetry.proto.trace.v1.Span.Link.prototype.setFlags = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bytes trace_id = 1;
 * @return {string}
 */
proto.opentelemetry.proto.trace.v1.Span.prototype.getTraceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes trace_id = 1;
 * This is a type-conversion wrapper around `getTraceId()`
 * @return {string}
 */
proto.opentelemetry.proto.trace.v1.Span.prototype.getTraceId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTraceId()));
};


/**
 * optional bytes trace_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTraceId()`
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.trace.v1.Span.prototype.getTraceId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTraceId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.opentelemetry.proto.trace.v1.Span} returns this
 */
proto.opentelemetry.proto.trace.v1.Span.prototype.setTraceId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes span_id = 2;
 * @return {string}
 */
proto.opentelemetry.proto.trace.v1.Span.prototype.getSpanId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes span_id = 2;
 * This is a type-conversion wrapper around `getSpanId()`
 * @return {string}
 */
proto.opentelemetry.proto.trace.v1.Span.prototype.getSpanId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSpanId()));
};


/**
 * optional bytes span_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSpanId()`
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.trace.v1.Span.prototype.getSpanId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSpanId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.opentelemetry.proto.trace.v1.Span} returns this
 */
proto.opentelemetry.proto.trace.v1.Span.prototype.setSpanId = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string trace_state = 3;
 * @return {string}
 */
proto.opentelemetry.proto.trace.v1.Span.prototype.getTraceState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.opentelemetry.proto.trace.v1.Span} returns this
 */
proto.opentelemetry.proto.trace.v1.Span.prototype.setTraceState = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bytes parent_span_id = 4;
 * @return {string}
 */
proto.opentelemetry.proto.trace.v1.Span.prototype.getParentSpanId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes parent_span_id = 4;
 * This is a type-conversion wrapper around `getParentSpanId()`
 * @return {string}
 */
proto.opentelemetry.proto.trace.v1.Span.prototype.getParentSpanId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getParentSpanId()));
};


/**
 * optional bytes parent_span_id = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getParentSpanId()`
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.trace.v1.Span.prototype.getParentSpanId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getParentSpanId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.opentelemetry.proto.trace.v1.Span} returns this
 */
proto.opentelemetry.proto.trace.v1.Span.prototype.setParentSpanId = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional fixed32 flags = 16;
 * @return {number}
 */
proto.opentelemetry.proto.trace.v1.Span.prototype.getFlags = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.trace.v1.Span} returns this
 */
proto.opentelemetry.proto.trace.v1.Span.prototype.setFlags = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional string name = 5;
 * @return {string}
 */
proto.opentelemetry.proto.trace.v1.Span.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.opentelemetry.proto.trace.v1.Span} returns this
 */
proto.opentelemetry.proto.trace.v1.Span.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional SpanKind kind = 6;
 * @return {!proto.opentelemetry.proto.trace.v1.Span.SpanKind}
 */
proto.opentelemetry.proto.trace.v1.Span.prototype.getKind = function() {
  return /** @type {!proto.opentelemetry.proto.trace.v1.Span.SpanKind} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.opentelemetry.proto.trace.v1.Span.SpanKind} value
 * @return {!proto.opentelemetry.proto.trace.v1.Span} returns this
 */
proto.opentelemetry.proto.trace.v1.Span.prototype.setKind = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional fixed64 start_time_unix_nano = 7;
 * @return {number}
 */
proto.opentelemetry.proto.trace.v1.Span.prototype.getStartTimeUnixNano = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.trace.v1.Span} returns this
 */
proto.opentelemetry.proto.trace.v1.Span.prototype.setStartTimeUnixNano = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional fixed64 end_time_unix_nano = 8;
 * @return {number}
 */
proto.opentelemetry.proto.trace.v1.Span.prototype.getEndTimeUnixNano = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.trace.v1.Span} returns this
 */
proto.opentelemetry.proto.trace.v1.Span.prototype.setEndTimeUnixNano = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * repeated opentelemetry.proto.common.v1.KeyValue attributes = 9;
 * @return {!Array<!proto.opentelemetry.proto.common.v1.KeyValue>}
 */
proto.opentelemetry.proto.trace.v1.Span.prototype.getAttributesList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.common.v1.KeyValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, opentelemetry_proto_common_v1_common_pb.KeyValue, 9));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.common.v1.KeyValue>} value
 * @return {!proto.opentelemetry.proto.trace.v1.Span} returns this
*/
proto.opentelemetry.proto.trace.v1.Span.prototype.setAttributesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.opentelemetry.proto.common.v1.KeyValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.common.v1.KeyValue}
 */
proto.opentelemetry.proto.trace.v1.Span.prototype.addAttributes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.opentelemetry.proto.common.v1.KeyValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.trace.v1.Span} returns this
 */
proto.opentelemetry.proto.trace.v1.Span.prototype.clearAttributesList = function() {
  return this.setAttributesList([]);
};


/**
 * optional uint32 dropped_attributes_count = 10;
 * @return {number}
 */
proto.opentelemetry.proto.trace.v1.Span.prototype.getDroppedAttributesCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.trace.v1.Span} returns this
 */
proto.opentelemetry.proto.trace.v1.Span.prototype.setDroppedAttributesCount = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * repeated Event events = 11;
 * @return {!Array<!proto.opentelemetry.proto.trace.v1.Span.Event>}
 */
proto.opentelemetry.proto.trace.v1.Span.prototype.getEventsList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.trace.v1.Span.Event>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.trace.v1.Span.Event, 11));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.trace.v1.Span.Event>} value
 * @return {!proto.opentelemetry.proto.trace.v1.Span} returns this
*/
proto.opentelemetry.proto.trace.v1.Span.prototype.setEventsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.opentelemetry.proto.trace.v1.Span.Event=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.trace.v1.Span.Event}
 */
proto.opentelemetry.proto.trace.v1.Span.prototype.addEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.opentelemetry.proto.trace.v1.Span.Event, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.trace.v1.Span} returns this
 */
proto.opentelemetry.proto.trace.v1.Span.prototype.clearEventsList = function() {
  return this.setEventsList([]);
};


/**
 * optional uint32 dropped_events_count = 12;
 * @return {number}
 */
proto.opentelemetry.proto.trace.v1.Span.prototype.getDroppedEventsCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.trace.v1.Span} returns this
 */
proto.opentelemetry.proto.trace.v1.Span.prototype.setDroppedEventsCount = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * repeated Link links = 13;
 * @return {!Array<!proto.opentelemetry.proto.trace.v1.Span.Link>}
 */
proto.opentelemetry.proto.trace.v1.Span.prototype.getLinksList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.trace.v1.Span.Link>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.trace.v1.Span.Link, 13));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.trace.v1.Span.Link>} value
 * @return {!proto.opentelemetry.proto.trace.v1.Span} returns this
*/
proto.opentelemetry.proto.trace.v1.Span.prototype.setLinksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.opentelemetry.proto.trace.v1.Span.Link=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.trace.v1.Span.Link}
 */
proto.opentelemetry.proto.trace.v1.Span.prototype.addLinks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.opentelemetry.proto.trace.v1.Span.Link, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.trace.v1.Span} returns this
 */
proto.opentelemetry.proto.trace.v1.Span.prototype.clearLinksList = function() {
  return this.setLinksList([]);
};


/**
 * optional uint32 dropped_links_count = 14;
 * @return {number}
 */
proto.opentelemetry.proto.trace.v1.Span.prototype.getDroppedLinksCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.trace.v1.Span} returns this
 */
proto.opentelemetry.proto.trace.v1.Span.prototype.setDroppedLinksCount = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional Status status = 15;
 * @return {?proto.opentelemetry.proto.trace.v1.Status}
 */
proto.opentelemetry.proto.trace.v1.Span.prototype.getStatus = function() {
  return /** @type{?proto.opentelemetry.proto.trace.v1.Status} */ (
    jspb.Message.getWrapperField(this, proto.opentelemetry.proto.trace.v1.Status, 15));
};


/**
 * @param {?proto.opentelemetry.proto.trace.v1.Status|undefined} value
 * @return {!proto.opentelemetry.proto.trace.v1.Span} returns this
*/
proto.opentelemetry.proto.trace.v1.Span.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 15, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opentelemetry.proto.trace.v1.Span} returns this
 */
proto.opentelemetry.proto.trace.v1.Span.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.trace.v1.Span.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 15) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.trace.v1.Status.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.trace.v1.Status.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.trace.v1.Status} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.trace.v1.Status.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    code: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.trace.v1.Status}
 */
proto.opentelemetry.proto.trace.v1.Status.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.trace.v1.Status;
  return proto.opentelemetry.proto.trace.v1.Status.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.trace.v1.Status} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.trace.v1.Status}
 */
proto.opentelemetry.proto.trace.v1.Status.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {!proto.opentelemetry.proto.trace.v1.Status.StatusCode} */ (reader.readEnum());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.trace.v1.Status.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.trace.v1.Status.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.trace.v1.Status} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.trace.v1.Status.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.opentelemetry.proto.trace.v1.Status.StatusCode = {
  STATUS_CODE_UNSET: 0,
  STATUS_CODE_OK: 1,
  STATUS_CODE_ERROR: 2
};

/**
 * optional string message = 2;
 * @return {string}
 */
proto.opentelemetry.proto.trace.v1.Status.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.opentelemetry.proto.trace.v1.Status} returns this
 */
proto.opentelemetry.proto.trace.v1.Status.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional StatusCode code = 3;
 * @return {!proto.opentelemetry.proto.trace.v1.Status.StatusCode}
 */
proto.opentelemetry.proto.trace.v1.Status.prototype.getCode = function() {
  return /** @type {!proto.opentelemetry.proto.trace.v1.Status.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.opentelemetry.proto.trace.v1.Status.StatusCode} value
 * @return {!proto.opentelemetry.proto.trace.v1.Status} returns this
 */
proto.opentelemetry.proto.trace.v1.Status.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.opentelemetry.proto.trace.v1.SpanFlags = {
  SPAN_FLAGS_DO_NOT_USE: 0,
  SPAN_FLAGS_TRACE_FLAGS_MASK: 255,
  SPAN_FLAGS_CONTEXT_HAS_IS_REMOTE_MASK: 256,
  SPAN_FLAGS_CONTEXT_IS_REMOTE_MASK: 512
};

goog.object.extend(exports, proto.opentelemetry.proto.trace.v1);
