// service: opentelemetry/proto/common/v1/common.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.opentelemetry.proto.common.v1.AnyValue', null, global);
goog.exportSymbol('proto.opentelemetry.proto.common.v1.AnyValue.ValueCase', null, global);
goog.exportSymbol('proto.opentelemetry.proto.common.v1.ArrayValue', null, global);
goog.exportSymbol('proto.opentelemetry.proto.common.v1.InstrumentationScope', null, global);
goog.exportSymbol('proto.opentelemetry.proto.common.v1.KeyValue', null, global);
goog.exportSymbol('proto.opentelemetry.proto.common.v1.KeyValueList', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.common.v1.AnyValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.opentelemetry.proto.common.v1.AnyValue.oneofGroups_);
};
goog.inherits(proto.opentelemetry.proto.common.v1.AnyValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.common.v1.AnyValue.displayName = 'proto.opentelemetry.proto.common.v1.AnyValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.common.v1.ArrayValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.common.v1.ArrayValue.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.common.v1.ArrayValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.common.v1.ArrayValue.displayName = 'proto.opentelemetry.proto.common.v1.ArrayValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.common.v1.KeyValueList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.common.v1.KeyValueList.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.common.v1.KeyValueList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.common.v1.KeyValueList.displayName = 'proto.opentelemetry.proto.common.v1.KeyValueList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.common.v1.KeyValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opentelemetry.proto.common.v1.KeyValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.common.v1.KeyValue.displayName = 'proto.opentelemetry.proto.common.v1.KeyValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.common.v1.InstrumentationScope = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.common.v1.InstrumentationScope.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.common.v1.InstrumentationScope, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.common.v1.InstrumentationScope.displayName = 'proto.opentelemetry.proto.common.v1.InstrumentationScope';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.opentelemetry.proto.common.v1.AnyValue.oneofGroups_ = [[1,2,3,4,5,6,7]];

/**
 * @enum {number}
 */
proto.opentelemetry.proto.common.v1.AnyValue.ValueCase = {
  VALUE_NOT_SET: 0,
  STRING_VALUE: 1,
  BOOL_VALUE: 2,
  INT_VALUE: 3,
  DOUBLE_VALUE: 4,
  ARRAY_VALUE: 5,
  KVLIST_VALUE: 6,
  BYTES_VALUE: 7
};

/**
 * @return {proto.opentelemetry.proto.common.v1.AnyValue.ValueCase}
 */
proto.opentelemetry.proto.common.v1.AnyValue.prototype.getValueCase = function() {
  return /** @type {proto.opentelemetry.proto.common.v1.AnyValue.ValueCase} */(jspb.Message.computeOneofCase(this, proto.opentelemetry.proto.common.v1.AnyValue.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.common.v1.AnyValue.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.common.v1.AnyValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.common.v1.AnyValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.common.v1.AnyValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    stringValue: jspb.Message.getFieldWithDefault(msg, 1, ""),
    boolValue: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    intValue: jspb.Message.getFieldWithDefault(msg, 3, 0),
    doubleValue: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    arrayValue: (f = msg.getArrayValue()) && proto.opentelemetry.proto.common.v1.ArrayValue.toObject(includeInstance, f),
    kvlistValue: (f = msg.getKvlistValue()) && proto.opentelemetry.proto.common.v1.KeyValueList.toObject(includeInstance, f),
    bytesValue: msg.getBytesValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.common.v1.AnyValue}
 */
proto.opentelemetry.proto.common.v1.AnyValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.common.v1.AnyValue;
  return proto.opentelemetry.proto.common.v1.AnyValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.common.v1.AnyValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.common.v1.AnyValue}
 */
proto.opentelemetry.proto.common.v1.AnyValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringValue(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolValue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIntValue(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDoubleValue(value);
      break;
    case 5:
      var value = new proto.opentelemetry.proto.common.v1.ArrayValue;
      reader.readMessage(value,proto.opentelemetry.proto.common.v1.ArrayValue.deserializeBinaryFromReader);
      msg.setArrayValue(value);
      break;
    case 6:
      var value = new proto.opentelemetry.proto.common.v1.KeyValueList;
      reader.readMessage(value,proto.opentelemetry.proto.common.v1.KeyValueList.deserializeBinaryFromReader);
      msg.setKvlistValue(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytesValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.common.v1.AnyValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.common.v1.AnyValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.common.v1.AnyValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.common.v1.AnyValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getArrayValue();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.opentelemetry.proto.common.v1.ArrayValue.serializeBinaryToWriter
    );
  }
  f = message.getKvlistValue();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.opentelemetry.proto.common.v1.KeyValueList.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBytes(
      7,
      f
    );
  }
};


/**
 * optional string string_value = 1;
 * @return {string}
 */
proto.opentelemetry.proto.common.v1.AnyValue.prototype.getStringValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.opentelemetry.proto.common.v1.AnyValue} returns this
 */
proto.opentelemetry.proto.common.v1.AnyValue.prototype.setStringValue = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.opentelemetry.proto.common.v1.AnyValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.opentelemetry.proto.common.v1.AnyValue} returns this
 */
proto.opentelemetry.proto.common.v1.AnyValue.prototype.clearStringValue = function() {
  return jspb.Message.setOneofField(this, 1, proto.opentelemetry.proto.common.v1.AnyValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.common.v1.AnyValue.prototype.hasStringValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool bool_value = 2;
 * @return {boolean}
 */
proto.opentelemetry.proto.common.v1.AnyValue.prototype.getBoolValue = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.opentelemetry.proto.common.v1.AnyValue} returns this
 */
proto.opentelemetry.proto.common.v1.AnyValue.prototype.setBoolValue = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.opentelemetry.proto.common.v1.AnyValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.opentelemetry.proto.common.v1.AnyValue} returns this
 */
proto.opentelemetry.proto.common.v1.AnyValue.prototype.clearBoolValue = function() {
  return jspb.Message.setOneofField(this, 2, proto.opentelemetry.proto.common.v1.AnyValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.common.v1.AnyValue.prototype.hasBoolValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 int_value = 3;
 * @return {number}
 */
proto.opentelemetry.proto.common.v1.AnyValue.prototype.getIntValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.common.v1.AnyValue} returns this
 */
proto.opentelemetry.proto.common.v1.AnyValue.prototype.setIntValue = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.opentelemetry.proto.common.v1.AnyValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.opentelemetry.proto.common.v1.AnyValue} returns this
 */
proto.opentelemetry.proto.common.v1.AnyValue.prototype.clearIntValue = function() {
  return jspb.Message.setOneofField(this, 3, proto.opentelemetry.proto.common.v1.AnyValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.common.v1.AnyValue.prototype.hasIntValue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double double_value = 4;
 * @return {number}
 */
proto.opentelemetry.proto.common.v1.AnyValue.prototype.getDoubleValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.common.v1.AnyValue} returns this
 */
proto.opentelemetry.proto.common.v1.AnyValue.prototype.setDoubleValue = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.opentelemetry.proto.common.v1.AnyValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.opentelemetry.proto.common.v1.AnyValue} returns this
 */
proto.opentelemetry.proto.common.v1.AnyValue.prototype.clearDoubleValue = function() {
  return jspb.Message.setOneofField(this, 4, proto.opentelemetry.proto.common.v1.AnyValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.common.v1.AnyValue.prototype.hasDoubleValue = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ArrayValue array_value = 5;
 * @return {?proto.opentelemetry.proto.common.v1.ArrayValue}
 */
proto.opentelemetry.proto.common.v1.AnyValue.prototype.getArrayValue = function() {
  return /** @type{?proto.opentelemetry.proto.common.v1.ArrayValue} */ (
    jspb.Message.getWrapperField(this, proto.opentelemetry.proto.common.v1.ArrayValue, 5));
};


/**
 * @param {?proto.opentelemetry.proto.common.v1.ArrayValue|undefined} value
 * @return {!proto.opentelemetry.proto.common.v1.AnyValue} returns this
*/
proto.opentelemetry.proto.common.v1.AnyValue.prototype.setArrayValue = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.opentelemetry.proto.common.v1.AnyValue.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opentelemetry.proto.common.v1.AnyValue} returns this
 */
proto.opentelemetry.proto.common.v1.AnyValue.prototype.clearArrayValue = function() {
  return this.setArrayValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.common.v1.AnyValue.prototype.hasArrayValue = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional KeyValueList kvlist_value = 6;
 * @return {?proto.opentelemetry.proto.common.v1.KeyValueList}
 */
proto.opentelemetry.proto.common.v1.AnyValue.prototype.getKvlistValue = function() {
  return /** @type{?proto.opentelemetry.proto.common.v1.KeyValueList} */ (
    jspb.Message.getWrapperField(this, proto.opentelemetry.proto.common.v1.KeyValueList, 6));
};


/**
 * @param {?proto.opentelemetry.proto.common.v1.KeyValueList|undefined} value
 * @return {!proto.opentelemetry.proto.common.v1.AnyValue} returns this
*/
proto.opentelemetry.proto.common.v1.AnyValue.prototype.setKvlistValue = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.opentelemetry.proto.common.v1.AnyValue.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opentelemetry.proto.common.v1.AnyValue} returns this
 */
proto.opentelemetry.proto.common.v1.AnyValue.prototype.clearKvlistValue = function() {
  return this.setKvlistValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.common.v1.AnyValue.prototype.hasKvlistValue = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bytes bytes_value = 7;
 * @return {string}
 */
proto.opentelemetry.proto.common.v1.AnyValue.prototype.getBytesValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes bytes_value = 7;
 * This is a type-conversion wrapper around `getBytesValue()`
 * @return {string}
 */
proto.opentelemetry.proto.common.v1.AnyValue.prototype.getBytesValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytesValue()));
};


/**
 * optional bytes bytes_value = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytesValue()`
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.common.v1.AnyValue.prototype.getBytesValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytesValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.opentelemetry.proto.common.v1.AnyValue} returns this
 */
proto.opentelemetry.proto.common.v1.AnyValue.prototype.setBytesValue = function(value) {
  return jspb.Message.setOneofField(this, 7, proto.opentelemetry.proto.common.v1.AnyValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.opentelemetry.proto.common.v1.AnyValue} returns this
 */
proto.opentelemetry.proto.common.v1.AnyValue.prototype.clearBytesValue = function() {
  return jspb.Message.setOneofField(this, 7, proto.opentelemetry.proto.common.v1.AnyValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.common.v1.AnyValue.prototype.hasBytesValue = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.common.v1.ArrayValue.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.common.v1.ArrayValue.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.common.v1.ArrayValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.common.v1.ArrayValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.common.v1.ArrayValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.opentelemetry.proto.common.v1.AnyValue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.common.v1.ArrayValue}
 */
proto.opentelemetry.proto.common.v1.ArrayValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.common.v1.ArrayValue;
  return proto.opentelemetry.proto.common.v1.ArrayValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.common.v1.ArrayValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.common.v1.ArrayValue}
 */
proto.opentelemetry.proto.common.v1.ArrayValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opentelemetry.proto.common.v1.AnyValue;
      reader.readMessage(value,proto.opentelemetry.proto.common.v1.AnyValue.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.common.v1.ArrayValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.common.v1.ArrayValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.common.v1.ArrayValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.common.v1.ArrayValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.opentelemetry.proto.common.v1.AnyValue.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AnyValue values = 1;
 * @return {!Array<!proto.opentelemetry.proto.common.v1.AnyValue>}
 */
proto.opentelemetry.proto.common.v1.ArrayValue.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.common.v1.AnyValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.common.v1.AnyValue, 1));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.common.v1.AnyValue>} value
 * @return {!proto.opentelemetry.proto.common.v1.ArrayValue} returns this
*/
proto.opentelemetry.proto.common.v1.ArrayValue.prototype.setValuesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.opentelemetry.proto.common.v1.AnyValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.common.v1.AnyValue}
 */
proto.opentelemetry.proto.common.v1.ArrayValue.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.opentelemetry.proto.common.v1.AnyValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.common.v1.ArrayValue} returns this
 */
proto.opentelemetry.proto.common.v1.ArrayValue.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.common.v1.KeyValueList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.common.v1.KeyValueList.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.common.v1.KeyValueList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.common.v1.KeyValueList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.common.v1.KeyValueList.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.opentelemetry.proto.common.v1.KeyValue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.common.v1.KeyValueList}
 */
proto.opentelemetry.proto.common.v1.KeyValueList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.common.v1.KeyValueList;
  return proto.opentelemetry.proto.common.v1.KeyValueList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.common.v1.KeyValueList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.common.v1.KeyValueList}
 */
proto.opentelemetry.proto.common.v1.KeyValueList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opentelemetry.proto.common.v1.KeyValue;
      reader.readMessage(value,proto.opentelemetry.proto.common.v1.KeyValue.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.common.v1.KeyValueList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.common.v1.KeyValueList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.common.v1.KeyValueList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.common.v1.KeyValueList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.opentelemetry.proto.common.v1.KeyValue.serializeBinaryToWriter
    );
  }
};


/**
 * repeated KeyValue values = 1;
 * @return {!Array<!proto.opentelemetry.proto.common.v1.KeyValue>}
 */
proto.opentelemetry.proto.common.v1.KeyValueList.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.common.v1.KeyValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.common.v1.KeyValue, 1));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.common.v1.KeyValue>} value
 * @return {!proto.opentelemetry.proto.common.v1.KeyValueList} returns this
*/
proto.opentelemetry.proto.common.v1.KeyValueList.prototype.setValuesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.opentelemetry.proto.common.v1.KeyValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.common.v1.KeyValue}
 */
proto.opentelemetry.proto.common.v1.KeyValueList.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.opentelemetry.proto.common.v1.KeyValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.common.v1.KeyValueList} returns this
 */
proto.opentelemetry.proto.common.v1.KeyValueList.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.common.v1.KeyValue.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.common.v1.KeyValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.common.v1.KeyValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.common.v1.KeyValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: (f = msg.getValue()) && proto.opentelemetry.proto.common.v1.AnyValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.common.v1.KeyValue}
 */
proto.opentelemetry.proto.common.v1.KeyValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.common.v1.KeyValue;
  return proto.opentelemetry.proto.common.v1.KeyValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.common.v1.KeyValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.common.v1.KeyValue}
 */
proto.opentelemetry.proto.common.v1.KeyValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = new proto.opentelemetry.proto.common.v1.AnyValue;
      reader.readMessage(value,proto.opentelemetry.proto.common.v1.AnyValue.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.common.v1.KeyValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.common.v1.KeyValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.common.v1.KeyValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.common.v1.KeyValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opentelemetry.proto.common.v1.AnyValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.opentelemetry.proto.common.v1.KeyValue.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.opentelemetry.proto.common.v1.KeyValue} returns this
 */
proto.opentelemetry.proto.common.v1.KeyValue.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional AnyValue value = 2;
 * @return {?proto.opentelemetry.proto.common.v1.AnyValue}
 */
proto.opentelemetry.proto.common.v1.KeyValue.prototype.getValue = function() {
  return /** @type{?proto.opentelemetry.proto.common.v1.AnyValue} */ (
    jspb.Message.getWrapperField(this, proto.opentelemetry.proto.common.v1.AnyValue, 2));
};


/**
 * @param {?proto.opentelemetry.proto.common.v1.AnyValue|undefined} value
 * @return {!proto.opentelemetry.proto.common.v1.KeyValue} returns this
*/
proto.opentelemetry.proto.common.v1.KeyValue.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opentelemetry.proto.common.v1.KeyValue} returns this
 */
proto.opentelemetry.proto.common.v1.KeyValue.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.common.v1.KeyValue.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.common.v1.InstrumentationScope.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.common.v1.InstrumentationScope.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.common.v1.InstrumentationScope.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.common.v1.InstrumentationScope} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.common.v1.InstrumentationScope.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    version: jspb.Message.getFieldWithDefault(msg, 2, ""),
    attributesList: jspb.Message.toObjectList(msg.getAttributesList(),
    proto.opentelemetry.proto.common.v1.KeyValue.toObject, includeInstance),
    droppedAttributesCount: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.common.v1.InstrumentationScope}
 */
proto.opentelemetry.proto.common.v1.InstrumentationScope.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.common.v1.InstrumentationScope;
  return proto.opentelemetry.proto.common.v1.InstrumentationScope.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.common.v1.InstrumentationScope} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.common.v1.InstrumentationScope}
 */
proto.opentelemetry.proto.common.v1.InstrumentationScope.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 3:
      var value = new proto.opentelemetry.proto.common.v1.KeyValue;
      reader.readMessage(value,proto.opentelemetry.proto.common.v1.KeyValue.deserializeBinaryFromReader);
      msg.addAttributes(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDroppedAttributesCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.common.v1.InstrumentationScope.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.common.v1.InstrumentationScope.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.common.v1.InstrumentationScope} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.common.v1.InstrumentationScope.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAttributesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.opentelemetry.proto.common.v1.KeyValue.serializeBinaryToWriter
    );
  }
  f = message.getDroppedAttributesCount();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.opentelemetry.proto.common.v1.InstrumentationScope.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.opentelemetry.proto.common.v1.InstrumentationScope} returns this
 */
proto.opentelemetry.proto.common.v1.InstrumentationScope.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.opentelemetry.proto.common.v1.InstrumentationScope.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.opentelemetry.proto.common.v1.InstrumentationScope} returns this
 */
proto.opentelemetry.proto.common.v1.InstrumentationScope.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated KeyValue attributes = 3;
 * @return {!Array<!proto.opentelemetry.proto.common.v1.KeyValue>}
 */
proto.opentelemetry.proto.common.v1.InstrumentationScope.prototype.getAttributesList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.common.v1.KeyValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.common.v1.KeyValue, 3));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.common.v1.KeyValue>} value
 * @return {!proto.opentelemetry.proto.common.v1.InstrumentationScope} returns this
*/
proto.opentelemetry.proto.common.v1.InstrumentationScope.prototype.setAttributesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.opentelemetry.proto.common.v1.KeyValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.common.v1.KeyValue}
 */
proto.opentelemetry.proto.common.v1.InstrumentationScope.prototype.addAttributes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.opentelemetry.proto.common.v1.KeyValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.common.v1.InstrumentationScope} returns this
 */
proto.opentelemetry.proto.common.v1.InstrumentationScope.prototype.clearAttributesList = function() {
  return this.setAttributesList([]);
};


/**
 * optional uint32 dropped_attributes_count = 4;
 * @return {number}
 */
proto.opentelemetry.proto.common.v1.InstrumentationScope.prototype.getDroppedAttributesCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.common.v1.InstrumentationScope} returns this
 */
proto.opentelemetry.proto.common.v1.InstrumentationScope.prototype.setDroppedAttributesCount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


goog.object.extend(exports, proto.opentelemetry.proto.common.v1);
