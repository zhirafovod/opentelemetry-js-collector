// service: opentelemetry/proto/profiles/v1experimental/pprofextended.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var opentelemetry_proto_common_v1_common_pb = require('../../../../opentelemetry/proto/common/v1/common_pb.js');
goog.object.extend(proto, opentelemetry_proto_common_v1_common_pb);
goog.exportSymbol('proto.opentelemetry.proto.profiles.v1experimental.AggregationTemporality', null, global);
goog.exportSymbol('proto.opentelemetry.proto.profiles.v1experimental.AttributeUnit', null, global);
goog.exportSymbol('proto.opentelemetry.proto.profiles.v1experimental.BuildIdKind', null, global);
goog.exportSymbol('proto.opentelemetry.proto.profiles.v1experimental.Function', null, global);
goog.exportSymbol('proto.opentelemetry.proto.profiles.v1experimental.Label', null, global);
goog.exportSymbol('proto.opentelemetry.proto.profiles.v1experimental.Line', null, global);
goog.exportSymbol('proto.opentelemetry.proto.profiles.v1experimental.Link', null, global);
goog.exportSymbol('proto.opentelemetry.proto.profiles.v1experimental.Location', null, global);
goog.exportSymbol('proto.opentelemetry.proto.profiles.v1experimental.Mapping', null, global);
goog.exportSymbol('proto.opentelemetry.proto.profiles.v1experimental.Profile', null, global);
goog.exportSymbol('proto.opentelemetry.proto.profiles.v1experimental.Sample', null, global);
goog.exportSymbol('proto.opentelemetry.proto.profiles.v1experimental.ValueType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.profiles.v1experimental.Profile.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.profiles.v1experimental.Profile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.profiles.v1experimental.Profile.displayName = 'proto.opentelemetry.proto.profiles.v1experimental.Profile';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.profiles.v1experimental.AttributeUnit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opentelemetry.proto.profiles.v1experimental.AttributeUnit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.profiles.v1experimental.AttributeUnit.displayName = 'proto.opentelemetry.proto.profiles.v1experimental.AttributeUnit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.profiles.v1experimental.Link = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opentelemetry.proto.profiles.v1experimental.Link, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.profiles.v1experimental.Link.displayName = 'proto.opentelemetry.proto.profiles.v1experimental.Link';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.profiles.v1experimental.ValueType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opentelemetry.proto.profiles.v1experimental.ValueType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.profiles.v1experimental.ValueType.displayName = 'proto.opentelemetry.proto.profiles.v1experimental.ValueType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.profiles.v1experimental.Sample = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.profiles.v1experimental.Sample.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.profiles.v1experimental.Sample, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.profiles.v1experimental.Sample.displayName = 'proto.opentelemetry.proto.profiles.v1experimental.Sample';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.profiles.v1experimental.Label = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opentelemetry.proto.profiles.v1experimental.Label, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.profiles.v1experimental.Label.displayName = 'proto.opentelemetry.proto.profiles.v1experimental.Label';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.profiles.v1experimental.Mapping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.profiles.v1experimental.Mapping.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.profiles.v1experimental.Mapping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.profiles.v1experimental.Mapping.displayName = 'proto.opentelemetry.proto.profiles.v1experimental.Mapping';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.profiles.v1experimental.Location = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.profiles.v1experimental.Location.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.profiles.v1experimental.Location, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.profiles.v1experimental.Location.displayName = 'proto.opentelemetry.proto.profiles.v1experimental.Location';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.profiles.v1experimental.Line = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opentelemetry.proto.profiles.v1experimental.Line, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.profiles.v1experimental.Line.displayName = 'proto.opentelemetry.proto.profiles.v1experimental.Line';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.profiles.v1experimental.Function = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opentelemetry.proto.profiles.v1experimental.Function, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.profiles.v1experimental.Function.displayName = 'proto.opentelemetry.proto.profiles.v1experimental.Function';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.repeatedFields_ = [1,2,3,4,15,5,16,17,18,6,13];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.profiles.v1experimental.Profile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.Profile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.toObject = function(includeInstance, msg) {
  var f, obj = {
    sampleTypeList: jspb.Message.toObjectList(msg.getSampleTypeList(),
    proto.opentelemetry.proto.profiles.v1experimental.ValueType.toObject, includeInstance),
    sampleList: jspb.Message.toObjectList(msg.getSampleList(),
    proto.opentelemetry.proto.profiles.v1experimental.Sample.toObject, includeInstance),
    mappingList: jspb.Message.toObjectList(msg.getMappingList(),
    proto.opentelemetry.proto.profiles.v1experimental.Mapping.toObject, includeInstance),
    locationList: jspb.Message.toObjectList(msg.getLocationList(),
    proto.opentelemetry.proto.profiles.v1experimental.Location.toObject, includeInstance),
    locationIndicesList: (f = jspb.Message.getRepeatedField(msg, 15)) == null ? undefined : f,
    functionList: jspb.Message.toObjectList(msg.getFunctionList(),
    proto.opentelemetry.proto.profiles.v1experimental.Function.toObject, includeInstance),
    attributeTableList: jspb.Message.toObjectList(msg.getAttributeTableList(),
    opentelemetry_proto_common_v1_common_pb.KeyValue.toObject, includeInstance),
    attributeUnitsList: jspb.Message.toObjectList(msg.getAttributeUnitsList(),
    proto.opentelemetry.proto.profiles.v1experimental.AttributeUnit.toObject, includeInstance),
    linkTableList: jspb.Message.toObjectList(msg.getLinkTableList(),
    proto.opentelemetry.proto.profiles.v1experimental.Link.toObject, includeInstance),
    stringTableList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    dropFrames: jspb.Message.getFieldWithDefault(msg, 7, 0),
    keepFrames: jspb.Message.getFieldWithDefault(msg, 8, 0),
    timeNanos: jspb.Message.getFieldWithDefault(msg, 9, 0),
    durationNanos: jspb.Message.getFieldWithDefault(msg, 10, 0),
    periodType: (f = msg.getPeriodType()) && proto.opentelemetry.proto.profiles.v1experimental.ValueType.toObject(includeInstance, f),
    period: jspb.Message.getFieldWithDefault(msg, 12, 0),
    commentList: (f = jspb.Message.getRepeatedField(msg, 13)) == null ? undefined : f,
    defaultSampleType: jspb.Message.getFieldWithDefault(msg, 14, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Profile}
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.profiles.v1experimental.Profile;
  return proto.opentelemetry.proto.profiles.v1experimental.Profile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.Profile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Profile}
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opentelemetry.proto.profiles.v1experimental.ValueType;
      reader.readMessage(value,proto.opentelemetry.proto.profiles.v1experimental.ValueType.deserializeBinaryFromReader);
      msg.addSampleType(value);
      break;
    case 2:
      var value = new proto.opentelemetry.proto.profiles.v1experimental.Sample;
      reader.readMessage(value,proto.opentelemetry.proto.profiles.v1experimental.Sample.deserializeBinaryFromReader);
      msg.addSample(value);
      break;
    case 3:
      var value = new proto.opentelemetry.proto.profiles.v1experimental.Mapping;
      reader.readMessage(value,proto.opentelemetry.proto.profiles.v1experimental.Mapping.deserializeBinaryFromReader);
      msg.addMapping(value);
      break;
    case 4:
      var value = new proto.opentelemetry.proto.profiles.v1experimental.Location;
      reader.readMessage(value,proto.opentelemetry.proto.profiles.v1experimental.Location.deserializeBinaryFromReader);
      msg.addLocation(value);
      break;
    case 15:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt64() : [reader.readInt64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addLocationIndices(values[i]);
      }
      break;
    case 5:
      var value = new proto.opentelemetry.proto.profiles.v1experimental.Function;
      reader.readMessage(value,proto.opentelemetry.proto.profiles.v1experimental.Function.deserializeBinaryFromReader);
      msg.addFunction(value);
      break;
    case 16:
      var value = new opentelemetry_proto_common_v1_common_pb.KeyValue;
      reader.readMessage(value,opentelemetry_proto_common_v1_common_pb.KeyValue.deserializeBinaryFromReader);
      msg.addAttributeTable(value);
      break;
    case 17:
      var value = new proto.opentelemetry.proto.profiles.v1experimental.AttributeUnit;
      reader.readMessage(value,proto.opentelemetry.proto.profiles.v1experimental.AttributeUnit.deserializeBinaryFromReader);
      msg.addAttributeUnits(value);
      break;
    case 18:
      var value = new proto.opentelemetry.proto.profiles.v1experimental.Link;
      reader.readMessage(value,proto.opentelemetry.proto.profiles.v1experimental.Link.deserializeBinaryFromReader);
      msg.addLinkTable(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addStringTable(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDropFrames(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setKeepFrames(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimeNanos(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDurationNanos(value);
      break;
    case 11:
      var value = new proto.opentelemetry.proto.profiles.v1experimental.ValueType;
      reader.readMessage(value,proto.opentelemetry.proto.profiles.v1experimental.ValueType.deserializeBinaryFromReader);
      msg.setPeriodType(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPeriod(value);
      break;
    case 13:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt64() : [reader.readInt64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addComment(values[i]);
      }
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDefaultSampleType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.profiles.v1experimental.Profile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.Profile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSampleTypeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.opentelemetry.proto.profiles.v1experimental.ValueType.serializeBinaryToWriter
    );
  }
  f = message.getSampleList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.opentelemetry.proto.profiles.v1experimental.Sample.serializeBinaryToWriter
    );
  }
  f = message.getMappingList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.opentelemetry.proto.profiles.v1experimental.Mapping.serializeBinaryToWriter
    );
  }
  f = message.getLocationList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.opentelemetry.proto.profiles.v1experimental.Location.serializeBinaryToWriter
    );
  }
  f = message.getLocationIndicesList();
  if (f.length > 0) {
    writer.writePackedInt64(
      15,
      f
    );
  }
  f = message.getFunctionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.opentelemetry.proto.profiles.v1experimental.Function.serializeBinaryToWriter
    );
  }
  f = message.getAttributeTableList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      16,
      f,
      opentelemetry_proto_common_v1_common_pb.KeyValue.serializeBinaryToWriter
    );
  }
  f = message.getAttributeUnitsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      17,
      f,
      proto.opentelemetry.proto.profiles.v1experimental.AttributeUnit.serializeBinaryToWriter
    );
  }
  f = message.getLinkTableList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      18,
      f,
      proto.opentelemetry.proto.profiles.v1experimental.Link.serializeBinaryToWriter
    );
  }
  f = message.getStringTableList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getDropFrames();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getKeepFrames();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getTimeNanos();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getDurationNanos();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = message.getPeriodType();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.opentelemetry.proto.profiles.v1experimental.ValueType.serializeBinaryToWriter
    );
  }
  f = message.getPeriod();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getCommentList();
  if (f.length > 0) {
    writer.writePackedInt64(
      13,
      f
    );
  }
  f = message.getDefaultSampleType();
  if (f !== 0) {
    writer.writeInt64(
      14,
      f
    );
  }
};


/**
 * repeated ValueType sample_type = 1;
 * @return {!Array<!proto.opentelemetry.proto.profiles.v1experimental.ValueType>}
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.getSampleTypeList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.profiles.v1experimental.ValueType>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.profiles.v1experimental.ValueType, 1));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.profiles.v1experimental.ValueType>} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Profile} returns this
*/
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.setSampleTypeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.ValueType=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.ValueType}
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.addSampleType = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.opentelemetry.proto.profiles.v1experimental.ValueType, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Profile} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.clearSampleTypeList = function() {
  return this.setSampleTypeList([]);
};


/**
 * repeated Sample sample = 2;
 * @return {!Array<!proto.opentelemetry.proto.profiles.v1experimental.Sample>}
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.getSampleList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.profiles.v1experimental.Sample>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.profiles.v1experimental.Sample, 2));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.profiles.v1experimental.Sample>} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Profile} returns this
*/
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.setSampleList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.Sample=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Sample}
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.addSample = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.opentelemetry.proto.profiles.v1experimental.Sample, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Profile} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.clearSampleList = function() {
  return this.setSampleList([]);
};


/**
 * repeated Mapping mapping = 3;
 * @return {!Array<!proto.opentelemetry.proto.profiles.v1experimental.Mapping>}
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.getMappingList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.profiles.v1experimental.Mapping>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.profiles.v1experimental.Mapping, 3));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.profiles.v1experimental.Mapping>} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Profile} returns this
*/
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.setMappingList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.Mapping=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Mapping}
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.addMapping = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.opentelemetry.proto.profiles.v1experimental.Mapping, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Profile} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.clearMappingList = function() {
  return this.setMappingList([]);
};


/**
 * repeated Location location = 4;
 * @return {!Array<!proto.opentelemetry.proto.profiles.v1experimental.Location>}
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.getLocationList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.profiles.v1experimental.Location>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.profiles.v1experimental.Location, 4));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.profiles.v1experimental.Location>} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Profile} returns this
*/
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.setLocationList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.Location=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Location}
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.addLocation = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.opentelemetry.proto.profiles.v1experimental.Location, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Profile} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.clearLocationList = function() {
  return this.setLocationList([]);
};


/**
 * repeated int64 location_indices = 15;
 * @return {!Array<number>}
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.getLocationIndicesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 15));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Profile} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.setLocationIndicesList = function(value) {
  return jspb.Message.setField(this, 15, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Profile} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.addLocationIndices = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 15, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Profile} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.clearLocationIndicesList = function() {
  return this.setLocationIndicesList([]);
};


/**
 * repeated Function function = 5;
 * @return {!Array<!proto.opentelemetry.proto.profiles.v1experimental.Function>}
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.getFunctionList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.profiles.v1experimental.Function>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.profiles.v1experimental.Function, 5));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.profiles.v1experimental.Function>} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Profile} returns this
*/
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.setFunctionList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.Function=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Function}
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.addFunction = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.opentelemetry.proto.profiles.v1experimental.Function, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Profile} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.clearFunctionList = function() {
  return this.setFunctionList([]);
};


/**
 * repeated opentelemetry.proto.common.v1.KeyValue attribute_table = 16;
 * @return {!Array<!proto.opentelemetry.proto.common.v1.KeyValue>}
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.getAttributeTableList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.common.v1.KeyValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, opentelemetry_proto_common_v1_common_pb.KeyValue, 16));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.common.v1.KeyValue>} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Profile} returns this
*/
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.setAttributeTableList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 16, value);
};


/**
 * @param {!proto.opentelemetry.proto.common.v1.KeyValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.common.v1.KeyValue}
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.addAttributeTable = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 16, opt_value, proto.opentelemetry.proto.common.v1.KeyValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Profile} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.clearAttributeTableList = function() {
  return this.setAttributeTableList([]);
};


/**
 * repeated AttributeUnit attribute_units = 17;
 * @return {!Array<!proto.opentelemetry.proto.profiles.v1experimental.AttributeUnit>}
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.getAttributeUnitsList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.profiles.v1experimental.AttributeUnit>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.profiles.v1experimental.AttributeUnit, 17));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.profiles.v1experimental.AttributeUnit>} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Profile} returns this
*/
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.setAttributeUnitsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 17, value);
};


/**
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.AttributeUnit=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.AttributeUnit}
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.addAttributeUnits = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 17, opt_value, proto.opentelemetry.proto.profiles.v1experimental.AttributeUnit, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Profile} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.clearAttributeUnitsList = function() {
  return this.setAttributeUnitsList([]);
};


/**
 * repeated Link link_table = 18;
 * @return {!Array<!proto.opentelemetry.proto.profiles.v1experimental.Link>}
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.getLinkTableList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.profiles.v1experimental.Link>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.profiles.v1experimental.Link, 18));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.profiles.v1experimental.Link>} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Profile} returns this
*/
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.setLinkTableList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 18, value);
};


/**
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.Link=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Link}
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.addLinkTable = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 18, opt_value, proto.opentelemetry.proto.profiles.v1experimental.Link, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Profile} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.clearLinkTableList = function() {
  return this.setLinkTableList([]);
};


/**
 * repeated string string_table = 6;
 * @return {!Array<string>}
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.getStringTableList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Profile} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.setStringTableList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Profile} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.addStringTable = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Profile} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.clearStringTableList = function() {
  return this.setStringTableList([]);
};


/**
 * optional int64 drop_frames = 7;
 * @return {number}
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.getDropFrames = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Profile} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.setDropFrames = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 keep_frames = 8;
 * @return {number}
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.getKeepFrames = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Profile} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.setKeepFrames = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int64 time_nanos = 9;
 * @return {number}
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.getTimeNanos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Profile} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.setTimeNanos = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int64 duration_nanos = 10;
 * @return {number}
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.getDurationNanos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Profile} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.setDurationNanos = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional ValueType period_type = 11;
 * @return {?proto.opentelemetry.proto.profiles.v1experimental.ValueType}
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.getPeriodType = function() {
  return /** @type{?proto.opentelemetry.proto.profiles.v1experimental.ValueType} */ (
    jspb.Message.getWrapperField(this, proto.opentelemetry.proto.profiles.v1experimental.ValueType, 11));
};


/**
 * @param {?proto.opentelemetry.proto.profiles.v1experimental.ValueType|undefined} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Profile} returns this
*/
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.setPeriodType = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Profile} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.clearPeriodType = function() {
  return this.setPeriodType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.hasPeriodType = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional int64 period = 12;
 * @return {number}
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.getPeriod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Profile} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.setPeriod = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * repeated int64 comment = 13;
 * @return {!Array<number>}
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.getCommentList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 13));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Profile} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.setCommentList = function(value) {
  return jspb.Message.setField(this, 13, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Profile} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.addComment = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 13, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Profile} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.clearCommentList = function() {
  return this.setCommentList([]);
};


/**
 * optional int64 default_sample_type = 14;
 * @return {number}
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.getDefaultSampleType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Profile} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Profile.prototype.setDefaultSampleType = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.profiles.v1experimental.AttributeUnit.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.profiles.v1experimental.AttributeUnit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.AttributeUnit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.profiles.v1experimental.AttributeUnit.toObject = function(includeInstance, msg) {
  var f, obj = {
    attributeKey: jspb.Message.getFieldWithDefault(msg, 1, 0),
    unit: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.AttributeUnit}
 */
proto.opentelemetry.proto.profiles.v1experimental.AttributeUnit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.profiles.v1experimental.AttributeUnit;
  return proto.opentelemetry.proto.profiles.v1experimental.AttributeUnit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.AttributeUnit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.AttributeUnit}
 */
proto.opentelemetry.proto.profiles.v1experimental.AttributeUnit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAttributeKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUnit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.profiles.v1experimental.AttributeUnit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.profiles.v1experimental.AttributeUnit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.AttributeUnit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.profiles.v1experimental.AttributeUnit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttributeKey();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getUnit();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 attribute_key = 1;
 * @return {number}
 */
proto.opentelemetry.proto.profiles.v1experimental.AttributeUnit.prototype.getAttributeKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.AttributeUnit} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.AttributeUnit.prototype.setAttributeKey = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 unit = 2;
 * @return {number}
 */
proto.opentelemetry.proto.profiles.v1experimental.AttributeUnit.prototype.getUnit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.AttributeUnit} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.AttributeUnit.prototype.setUnit = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.profiles.v1experimental.Link.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.profiles.v1experimental.Link.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.Link} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.profiles.v1experimental.Link.toObject = function(includeInstance, msg) {
  var f, obj = {
    traceId: msg.getTraceId_asB64(),
    spanId: msg.getSpanId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Link}
 */
proto.opentelemetry.proto.profiles.v1experimental.Link.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.profiles.v1experimental.Link;
  return proto.opentelemetry.proto.profiles.v1experimental.Link.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.Link} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Link}
 */
proto.opentelemetry.proto.profiles.v1experimental.Link.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTraceId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSpanId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.profiles.v1experimental.Link.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.profiles.v1experimental.Link.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.Link} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.profiles.v1experimental.Link.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTraceId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSpanId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes trace_id = 1;
 * @return {string}
 */
proto.opentelemetry.proto.profiles.v1experimental.Link.prototype.getTraceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes trace_id = 1;
 * This is a type-conversion wrapper around `getTraceId()`
 * @return {string}
 */
proto.opentelemetry.proto.profiles.v1experimental.Link.prototype.getTraceId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTraceId()));
};


/**
 * optional bytes trace_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTraceId()`
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.profiles.v1experimental.Link.prototype.getTraceId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTraceId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Link} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Link.prototype.setTraceId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes span_id = 2;
 * @return {string}
 */
proto.opentelemetry.proto.profiles.v1experimental.Link.prototype.getSpanId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes span_id = 2;
 * This is a type-conversion wrapper around `getSpanId()`
 * @return {string}
 */
proto.opentelemetry.proto.profiles.v1experimental.Link.prototype.getSpanId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSpanId()));
};


/**
 * optional bytes span_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSpanId()`
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.profiles.v1experimental.Link.prototype.getSpanId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSpanId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Link} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Link.prototype.setSpanId = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.profiles.v1experimental.ValueType.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.profiles.v1experimental.ValueType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.ValueType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.profiles.v1experimental.ValueType.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    unit: jspb.Message.getFieldWithDefault(msg, 2, 0),
    aggregationTemporality: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.ValueType}
 */
proto.opentelemetry.proto.profiles.v1experimental.ValueType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.profiles.v1experimental.ValueType;
  return proto.opentelemetry.proto.profiles.v1experimental.ValueType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.ValueType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.ValueType}
 */
proto.opentelemetry.proto.profiles.v1experimental.ValueType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUnit(value);
      break;
    case 3:
      var value = /** @type {!proto.opentelemetry.proto.profiles.v1experimental.AggregationTemporality} */ (reader.readEnum());
      msg.setAggregationTemporality(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.profiles.v1experimental.ValueType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.profiles.v1experimental.ValueType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.ValueType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.profiles.v1experimental.ValueType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getUnit();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getAggregationTemporality();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional int64 type = 1;
 * @return {number}
 */
proto.opentelemetry.proto.profiles.v1experimental.ValueType.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.ValueType} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.ValueType.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 unit = 2;
 * @return {number}
 */
proto.opentelemetry.proto.profiles.v1experimental.ValueType.prototype.getUnit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.ValueType} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.ValueType.prototype.setUnit = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional AggregationTemporality aggregation_temporality = 3;
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.AggregationTemporality}
 */
proto.opentelemetry.proto.profiles.v1experimental.ValueType.prototype.getAggregationTemporality = function() {
  return /** @type {!proto.opentelemetry.proto.profiles.v1experimental.AggregationTemporality} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.AggregationTemporality} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.ValueType} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.ValueType.prototype.setAggregationTemporality = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.profiles.v1experimental.Sample.repeatedFields_ = [1,2,3,10,13];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.profiles.v1experimental.Sample.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.profiles.v1experimental.Sample.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.Sample} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.profiles.v1experimental.Sample.toObject = function(includeInstance, msg) {
  var f, obj = {
    locationIndexList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    locationsStartIndex: jspb.Message.getFieldWithDefault(msg, 7, 0),
    locationsLength: jspb.Message.getFieldWithDefault(msg, 8, 0),
    stacktraceIdIndex: jspb.Message.getFieldWithDefault(msg, 9, 0),
    valueList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    labelList: jspb.Message.toObjectList(msg.getLabelList(),
    proto.opentelemetry.proto.profiles.v1experimental.Label.toObject, includeInstance),
    attributesList: (f = jspb.Message.getRepeatedField(msg, 10)) == null ? undefined : f,
    link: jspb.Message.getFieldWithDefault(msg, 12, 0),
    timestampsUnixNanoList: (f = jspb.Message.getRepeatedField(msg, 13)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Sample}
 */
proto.opentelemetry.proto.profiles.v1experimental.Sample.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.profiles.v1experimental.Sample;
  return proto.opentelemetry.proto.profiles.v1experimental.Sample.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.Sample} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Sample}
 */
proto.opentelemetry.proto.profiles.v1experimental.Sample.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint64() : [reader.readUint64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addLocationIndex(values[i]);
      }
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLocationsStartIndex(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLocationsLength(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStacktraceIdIndex(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt64() : [reader.readInt64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addValue(values[i]);
      }
      break;
    case 3:
      var value = new proto.opentelemetry.proto.profiles.v1experimental.Label;
      reader.readMessage(value,proto.opentelemetry.proto.profiles.v1experimental.Label.deserializeBinaryFromReader);
      msg.addLabel(value);
      break;
    case 10:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint64() : [reader.readUint64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addAttributes(values[i]);
      }
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLink(value);
      break;
    case 13:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint64() : [reader.readUint64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addTimestampsUnixNano(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.profiles.v1experimental.Sample.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.profiles.v1experimental.Sample.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.Sample} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.profiles.v1experimental.Sample.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocationIndexList();
  if (f.length > 0) {
    writer.writePackedUint64(
      1,
      f
    );
  }
  f = message.getLocationsStartIndex();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getLocationsLength();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getStacktraceIdIndex();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getValueList();
  if (f.length > 0) {
    writer.writePackedInt64(
      2,
      f
    );
  }
  f = message.getLabelList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.opentelemetry.proto.profiles.v1experimental.Label.serializeBinaryToWriter
    );
  }
  f = message.getAttributesList();
  if (f.length > 0) {
    writer.writePackedUint64(
      10,
      f
    );
  }
  f = message.getLink();
  if (f !== 0) {
    writer.writeUint64(
      12,
      f
    );
  }
  f = message.getTimestampsUnixNanoList();
  if (f.length > 0) {
    writer.writePackedUint64(
      13,
      f
    );
  }
};


/**
 * repeated uint64 location_index = 1;
 * @return {!Array<number>}
 */
proto.opentelemetry.proto.profiles.v1experimental.Sample.prototype.getLocationIndexList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Sample} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Sample.prototype.setLocationIndexList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Sample} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Sample.prototype.addLocationIndex = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Sample} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Sample.prototype.clearLocationIndexList = function() {
  return this.setLocationIndexList([]);
};


/**
 * optional uint64 locations_start_index = 7;
 * @return {number}
 */
proto.opentelemetry.proto.profiles.v1experimental.Sample.prototype.getLocationsStartIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Sample} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Sample.prototype.setLocationsStartIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 locations_length = 8;
 * @return {number}
 */
proto.opentelemetry.proto.profiles.v1experimental.Sample.prototype.getLocationsLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Sample} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Sample.prototype.setLocationsLength = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint32 stacktrace_id_index = 9;
 * @return {number}
 */
proto.opentelemetry.proto.profiles.v1experimental.Sample.prototype.getStacktraceIdIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Sample} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Sample.prototype.setStacktraceIdIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * repeated int64 value = 2;
 * @return {!Array<number>}
 */
proto.opentelemetry.proto.profiles.v1experimental.Sample.prototype.getValueList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Sample} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Sample.prototype.setValueList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Sample} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Sample.prototype.addValue = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Sample} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Sample.prototype.clearValueList = function() {
  return this.setValueList([]);
};


/**
 * repeated Label label = 3;
 * @return {!Array<!proto.opentelemetry.proto.profiles.v1experimental.Label>}
 */
proto.opentelemetry.proto.profiles.v1experimental.Sample.prototype.getLabelList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.profiles.v1experimental.Label>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.profiles.v1experimental.Label, 3));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.profiles.v1experimental.Label>} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Sample} returns this
*/
proto.opentelemetry.proto.profiles.v1experimental.Sample.prototype.setLabelList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.Label=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Label}
 */
proto.opentelemetry.proto.profiles.v1experimental.Sample.prototype.addLabel = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.opentelemetry.proto.profiles.v1experimental.Label, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Sample} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Sample.prototype.clearLabelList = function() {
  return this.setLabelList([]);
};


/**
 * repeated uint64 attributes = 10;
 * @return {!Array<number>}
 */
proto.opentelemetry.proto.profiles.v1experimental.Sample.prototype.getAttributesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 10));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Sample} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Sample.prototype.setAttributesList = function(value) {
  return jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Sample} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Sample.prototype.addAttributes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Sample} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Sample.prototype.clearAttributesList = function() {
  return this.setAttributesList([]);
};


/**
 * optional uint64 link = 12;
 * @return {number}
 */
proto.opentelemetry.proto.profiles.v1experimental.Sample.prototype.getLink = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Sample} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Sample.prototype.setLink = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * repeated uint64 timestamps_unix_nano = 13;
 * @return {!Array<number>}
 */
proto.opentelemetry.proto.profiles.v1experimental.Sample.prototype.getTimestampsUnixNanoList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 13));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Sample} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Sample.prototype.setTimestampsUnixNanoList = function(value) {
  return jspb.Message.setField(this, 13, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Sample} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Sample.prototype.addTimestampsUnixNano = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 13, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Sample} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Sample.prototype.clearTimestampsUnixNanoList = function() {
  return this.setTimestampsUnixNanoList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.profiles.v1experimental.Label.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.profiles.v1experimental.Label.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.Label} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.profiles.v1experimental.Label.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, 0),
    str: jspb.Message.getFieldWithDefault(msg, 2, 0),
    num: jspb.Message.getFieldWithDefault(msg, 3, 0),
    numUnit: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Label}
 */
proto.opentelemetry.proto.profiles.v1experimental.Label.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.profiles.v1experimental.Label;
  return proto.opentelemetry.proto.profiles.v1experimental.Label.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.Label} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Label}
 */
proto.opentelemetry.proto.profiles.v1experimental.Label.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStr(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNum(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNumUnit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.profiles.v1experimental.Label.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.profiles.v1experimental.Label.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.Label} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.profiles.v1experimental.Label.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getStr();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getNum();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getNumUnit();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional int64 key = 1;
 * @return {number}
 */
proto.opentelemetry.proto.profiles.v1experimental.Label.prototype.getKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Label} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Label.prototype.setKey = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 str = 2;
 * @return {number}
 */
proto.opentelemetry.proto.profiles.v1experimental.Label.prototype.getStr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Label} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Label.prototype.setStr = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 num = 3;
 * @return {number}
 */
proto.opentelemetry.proto.profiles.v1experimental.Label.prototype.getNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Label} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Label.prototype.setNum = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 num_unit = 4;
 * @return {number}
 */
proto.opentelemetry.proto.profiles.v1experimental.Label.prototype.getNumUnit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Label} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Label.prototype.setNumUnit = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.profiles.v1experimental.Mapping.repeatedFields_ = [12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.profiles.v1experimental.Mapping.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.profiles.v1experimental.Mapping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.Mapping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.profiles.v1experimental.Mapping.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    memoryStart: jspb.Message.getFieldWithDefault(msg, 2, 0),
    memoryLimit: jspb.Message.getFieldWithDefault(msg, 3, 0),
    fileOffset: jspb.Message.getFieldWithDefault(msg, 4, 0),
    filename: jspb.Message.getFieldWithDefault(msg, 5, 0),
    buildId: jspb.Message.getFieldWithDefault(msg, 6, 0),
    buildIdKind: jspb.Message.getFieldWithDefault(msg, 11, 0),
    attributesList: (f = jspb.Message.getRepeatedField(msg, 12)) == null ? undefined : f,
    hasFunctions: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    hasFilenames: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    hasLineNumbers: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    hasInlineFrames: jspb.Message.getBooleanFieldWithDefault(msg, 10, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Mapping}
 */
proto.opentelemetry.proto.profiles.v1experimental.Mapping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.profiles.v1experimental.Mapping;
  return proto.opentelemetry.proto.profiles.v1experimental.Mapping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.Mapping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Mapping}
 */
proto.opentelemetry.proto.profiles.v1experimental.Mapping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMemoryStart(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMemoryLimit(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFileOffset(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFilename(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBuildId(value);
      break;
    case 11:
      var value = /** @type {!proto.opentelemetry.proto.profiles.v1experimental.BuildIdKind} */ (reader.readEnum());
      msg.setBuildIdKind(value);
      break;
    case 12:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint64() : [reader.readUint64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addAttributes(values[i]);
      }
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasFunctions(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasFilenames(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasLineNumbers(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasInlineFrames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.profiles.v1experimental.Mapping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.profiles.v1experimental.Mapping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.Mapping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.profiles.v1experimental.Mapping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getMemoryStart();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getMemoryLimit();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getFileOffset();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getFilename();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getBuildId();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getBuildIdKind();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = message.getAttributesList();
  if (f.length > 0) {
    writer.writePackedUint64(
      12,
      f
    );
  }
  f = message.getHasFunctions();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getHasFilenames();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getHasLineNumbers();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getHasInlineFrames();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.opentelemetry.proto.profiles.v1experimental.Mapping.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Mapping} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Mapping.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 memory_start = 2;
 * @return {number}
 */
proto.opentelemetry.proto.profiles.v1experimental.Mapping.prototype.getMemoryStart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Mapping} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Mapping.prototype.setMemoryStart = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 memory_limit = 3;
 * @return {number}
 */
proto.opentelemetry.proto.profiles.v1experimental.Mapping.prototype.getMemoryLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Mapping} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Mapping.prototype.setMemoryLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 file_offset = 4;
 * @return {number}
 */
proto.opentelemetry.proto.profiles.v1experimental.Mapping.prototype.getFileOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Mapping} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Mapping.prototype.setFileOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 filename = 5;
 * @return {number}
 */
proto.opentelemetry.proto.profiles.v1experimental.Mapping.prototype.getFilename = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Mapping} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Mapping.prototype.setFilename = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 build_id = 6;
 * @return {number}
 */
proto.opentelemetry.proto.profiles.v1experimental.Mapping.prototype.getBuildId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Mapping} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Mapping.prototype.setBuildId = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional BuildIdKind build_id_kind = 11;
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.BuildIdKind}
 */
proto.opentelemetry.proto.profiles.v1experimental.Mapping.prototype.getBuildIdKind = function() {
  return /** @type {!proto.opentelemetry.proto.profiles.v1experimental.BuildIdKind} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.BuildIdKind} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Mapping} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Mapping.prototype.setBuildIdKind = function(value) {
  return jspb.Message.setProto3EnumField(this, 11, value);
};


/**
 * repeated uint64 attributes = 12;
 * @return {!Array<number>}
 */
proto.opentelemetry.proto.profiles.v1experimental.Mapping.prototype.getAttributesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 12));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Mapping} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Mapping.prototype.setAttributesList = function(value) {
  return jspb.Message.setField(this, 12, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Mapping} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Mapping.prototype.addAttributes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 12, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Mapping} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Mapping.prototype.clearAttributesList = function() {
  return this.setAttributesList([]);
};


/**
 * optional bool has_functions = 7;
 * @return {boolean}
 */
proto.opentelemetry.proto.profiles.v1experimental.Mapping.prototype.getHasFunctions = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Mapping} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Mapping.prototype.setHasFunctions = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool has_filenames = 8;
 * @return {boolean}
 */
proto.opentelemetry.proto.profiles.v1experimental.Mapping.prototype.getHasFilenames = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Mapping} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Mapping.prototype.setHasFilenames = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bool has_line_numbers = 9;
 * @return {boolean}
 */
proto.opentelemetry.proto.profiles.v1experimental.Mapping.prototype.getHasLineNumbers = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Mapping} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Mapping.prototype.setHasLineNumbers = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional bool has_inline_frames = 10;
 * @return {boolean}
 */
proto.opentelemetry.proto.profiles.v1experimental.Mapping.prototype.getHasInlineFrames = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Mapping} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Mapping.prototype.setHasInlineFrames = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.profiles.v1experimental.Location.repeatedFields_ = [4,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.profiles.v1experimental.Location.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.profiles.v1experimental.Location.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.Location} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.profiles.v1experimental.Location.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    mappingIndex: jspb.Message.getFieldWithDefault(msg, 2, 0),
    address: jspb.Message.getFieldWithDefault(msg, 3, 0),
    lineList: jspb.Message.toObjectList(msg.getLineList(),
    proto.opentelemetry.proto.profiles.v1experimental.Line.toObject, includeInstance),
    isFolded: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    typeIndex: jspb.Message.getFieldWithDefault(msg, 6, 0),
    attributesList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Location}
 */
proto.opentelemetry.proto.profiles.v1experimental.Location.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.profiles.v1experimental.Location;
  return proto.opentelemetry.proto.profiles.v1experimental.Location.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.Location} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Location}
 */
proto.opentelemetry.proto.profiles.v1experimental.Location.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMappingIndex(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAddress(value);
      break;
    case 4:
      var value = new proto.opentelemetry.proto.profiles.v1experimental.Line;
      reader.readMessage(value,proto.opentelemetry.proto.profiles.v1experimental.Line.deserializeBinaryFromReader);
      msg.addLine(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsFolded(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTypeIndex(value);
      break;
    case 7:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint64() : [reader.readUint64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addAttributes(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.profiles.v1experimental.Location.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.profiles.v1experimental.Location.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.Location} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.profiles.v1experimental.Location.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getMappingIndex();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getAddress();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getLineList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.opentelemetry.proto.profiles.v1experimental.Line.serializeBinaryToWriter
    );
  }
  f = message.getIsFolded();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getTypeIndex();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getAttributesList();
  if (f.length > 0) {
    writer.writePackedUint64(
      7,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.opentelemetry.proto.profiles.v1experimental.Location.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Location} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Location.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 mapping_index = 2;
 * @return {number}
 */
proto.opentelemetry.proto.profiles.v1experimental.Location.prototype.getMappingIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Location} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Location.prototype.setMappingIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 address = 3;
 * @return {number}
 */
proto.opentelemetry.proto.profiles.v1experimental.Location.prototype.getAddress = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Location} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Location.prototype.setAddress = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated Line line = 4;
 * @return {!Array<!proto.opentelemetry.proto.profiles.v1experimental.Line>}
 */
proto.opentelemetry.proto.profiles.v1experimental.Location.prototype.getLineList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.profiles.v1experimental.Line>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.profiles.v1experimental.Line, 4));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.profiles.v1experimental.Line>} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Location} returns this
*/
proto.opentelemetry.proto.profiles.v1experimental.Location.prototype.setLineList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.Line=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Line}
 */
proto.opentelemetry.proto.profiles.v1experimental.Location.prototype.addLine = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.opentelemetry.proto.profiles.v1experimental.Line, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Location} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Location.prototype.clearLineList = function() {
  return this.setLineList([]);
};


/**
 * optional bool is_folded = 5;
 * @return {boolean}
 */
proto.opentelemetry.proto.profiles.v1experimental.Location.prototype.getIsFolded = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Location} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Location.prototype.setIsFolded = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional uint32 type_index = 6;
 * @return {number}
 */
proto.opentelemetry.proto.profiles.v1experimental.Location.prototype.getTypeIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Location} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Location.prototype.setTypeIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * repeated uint64 attributes = 7;
 * @return {!Array<number>}
 */
proto.opentelemetry.proto.profiles.v1experimental.Location.prototype.getAttributesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Location} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Location.prototype.setAttributesList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Location} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Location.prototype.addAttributes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Location} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Location.prototype.clearAttributesList = function() {
  return this.setAttributesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.profiles.v1experimental.Line.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.profiles.v1experimental.Line.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.Line} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.profiles.v1experimental.Line.toObject = function(includeInstance, msg) {
  var f, obj = {
    functionIndex: jspb.Message.getFieldWithDefault(msg, 1, 0),
    line: jspb.Message.getFieldWithDefault(msg, 2, 0),
    column: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Line}
 */
proto.opentelemetry.proto.profiles.v1experimental.Line.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.profiles.v1experimental.Line;
  return proto.opentelemetry.proto.profiles.v1experimental.Line.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.Line} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Line}
 */
proto.opentelemetry.proto.profiles.v1experimental.Line.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFunctionIndex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLine(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setColumn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.profiles.v1experimental.Line.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.profiles.v1experimental.Line.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.Line} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.profiles.v1experimental.Line.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFunctionIndex();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getLine();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getColumn();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional uint64 function_index = 1;
 * @return {number}
 */
proto.opentelemetry.proto.profiles.v1experimental.Line.prototype.getFunctionIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Line} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Line.prototype.setFunctionIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 line = 2;
 * @return {number}
 */
proto.opentelemetry.proto.profiles.v1experimental.Line.prototype.getLine = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Line} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Line.prototype.setLine = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 column = 3;
 * @return {number}
 */
proto.opentelemetry.proto.profiles.v1experimental.Line.prototype.getColumn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Line} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Line.prototype.setColumn = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.profiles.v1experimental.Function.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.profiles.v1experimental.Function.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.Function} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.profiles.v1experimental.Function.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, 0),
    systemName: jspb.Message.getFieldWithDefault(msg, 3, 0),
    filename: jspb.Message.getFieldWithDefault(msg, 4, 0),
    startLine: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Function}
 */
proto.opentelemetry.proto.profiles.v1experimental.Function.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.profiles.v1experimental.Function;
  return proto.opentelemetry.proto.profiles.v1experimental.Function.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.Function} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Function}
 */
proto.opentelemetry.proto.profiles.v1experimental.Function.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSystemName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFilename(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartLine(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.profiles.v1experimental.Function.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.profiles.v1experimental.Function.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.Function} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.profiles.v1experimental.Function.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getName();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getSystemName();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getFilename();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getStartLine();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.opentelemetry.proto.profiles.v1experimental.Function.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Function} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Function.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 name = 2;
 * @return {number}
 */
proto.opentelemetry.proto.profiles.v1experimental.Function.prototype.getName = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Function} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Function.prototype.setName = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 system_name = 3;
 * @return {number}
 */
proto.opentelemetry.proto.profiles.v1experimental.Function.prototype.getSystemName = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Function} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Function.prototype.setSystemName = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 filename = 4;
 * @return {number}
 */
proto.opentelemetry.proto.profiles.v1experimental.Function.prototype.getFilename = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Function} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Function.prototype.setFilename = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 start_line = 5;
 * @return {number}
 */
proto.opentelemetry.proto.profiles.v1experimental.Function.prototype.getStartLine = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.Function} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.Function.prototype.setStartLine = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * @enum {number}
 */
proto.opentelemetry.proto.profiles.v1experimental.AggregationTemporality = {
  AGGREGATION_TEMPORALITY_UNSPECIFIED: 0,
  AGGREGATION_TEMPORALITY_DELTA: 1,
  AGGREGATION_TEMPORALITY_CUMULATIVE: 2
};

/**
 * @enum {number}
 */
proto.opentelemetry.proto.profiles.v1experimental.BuildIdKind = {
  BUILD_ID_LINKER: 0,
  BUILD_ID_BINARY_HASH: 1
};

goog.object.extend(exports, proto.opentelemetry.proto.profiles.v1experimental);
