// source: opentelemetry/proto/profiles/v1experimental/profiles.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var opentelemetry_proto_common_v1_common_pb = require('../../../../opentelemetry/proto/common/v1/common_pb.js');
goog.object.extend(proto, opentelemetry_proto_common_v1_common_pb);
var opentelemetry_proto_resource_v1_resource_pb = require('../../../../opentelemetry/proto/resource/v1/resource_pb.js');
goog.object.extend(proto, opentelemetry_proto_resource_v1_resource_pb);
var opentelemetry_proto_profiles_v1experimental_pprofextended_pb = require('../../../../opentelemetry/proto/profiles/v1experimental/pprofextended_pb.js');
goog.object.extend(proto, opentelemetry_proto_profiles_v1experimental_pprofextended_pb);
goog.exportSymbol('proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer', null, global);
goog.exportSymbol('proto.opentelemetry.proto.profiles.v1experimental.ProfilesData', null, global);
goog.exportSymbol('proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles', null, global);
goog.exportSymbol('proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.profiles.v1experimental.ProfilesData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.profiles.v1experimental.ProfilesData.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.profiles.v1experimental.ProfilesData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.profiles.v1experimental.ProfilesData.displayName = 'proto.opentelemetry.proto.profiles.v1experimental.ProfilesData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles.displayName = 'proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles.displayName = 'proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer.displayName = 'proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.profiles.v1experimental.ProfilesData.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.profiles.v1experimental.ProfilesData.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.profiles.v1experimental.ProfilesData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.ProfilesData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.profiles.v1experimental.ProfilesData.toObject = function(includeInstance, msg) {
  var f, obj = {
    resourceProfilesList: jspb.Message.toObjectList(msg.getResourceProfilesList(),
    proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.ProfilesData}
 */
proto.opentelemetry.proto.profiles.v1experimental.ProfilesData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.profiles.v1experimental.ProfilesData;
  return proto.opentelemetry.proto.profiles.v1experimental.ProfilesData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.ProfilesData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.ProfilesData}
 */
proto.opentelemetry.proto.profiles.v1experimental.ProfilesData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles;
      reader.readMessage(value,proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles.deserializeBinaryFromReader);
      msg.addResourceProfiles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.profiles.v1experimental.ProfilesData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.profiles.v1experimental.ProfilesData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.ProfilesData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.profiles.v1experimental.ProfilesData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResourceProfilesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ResourceProfiles resource_profiles = 1;
 * @return {!Array<!proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles>}
 */
proto.opentelemetry.proto.profiles.v1experimental.ProfilesData.prototype.getResourceProfilesList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles, 1));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles>} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.ProfilesData} returns this
*/
proto.opentelemetry.proto.profiles.v1experimental.ProfilesData.prototype.setResourceProfilesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles}
 */
proto.opentelemetry.proto.profiles.v1experimental.ProfilesData.prototype.addResourceProfiles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.ProfilesData} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.ProfilesData.prototype.clearResourceProfilesList = function() {
  return this.setResourceProfilesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles.toObject = function(includeInstance, msg) {
  var f, obj = {
    resource: (f = msg.getResource()) && opentelemetry_proto_resource_v1_resource_pb.Resource.toObject(includeInstance, f),
    scopeProfilesList: jspb.Message.toObjectList(msg.getScopeProfilesList(),
    proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles.toObject, includeInstance),
    schemaUrl: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles}
 */
proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles;
  return proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles}
 */
proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new opentelemetry_proto_resource_v1_resource_pb.Resource;
      reader.readMessage(value,opentelemetry_proto_resource_v1_resource_pb.Resource.deserializeBinaryFromReader);
      msg.setResource(value);
      break;
    case 2:
      var value = new proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles;
      reader.readMessage(value,proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles.deserializeBinaryFromReader);
      msg.addScopeProfiles(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchemaUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResource();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      opentelemetry_proto_resource_v1_resource_pb.Resource.serializeBinaryToWriter
    );
  }
  f = message.getScopeProfilesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles.serializeBinaryToWriter
    );
  }
  f = message.getSchemaUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional opentelemetry.proto.resource.v1.Resource resource = 1;
 * @return {?proto.opentelemetry.proto.resource.v1.Resource}
 */
proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles.prototype.getResource = function() {
  return /** @type{?proto.opentelemetry.proto.resource.v1.Resource} */ (
    jspb.Message.getWrapperField(this, opentelemetry_proto_resource_v1_resource_pb.Resource, 1));
};


/**
 * @param {?proto.opentelemetry.proto.resource.v1.Resource|undefined} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles} returns this
*/
proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles.prototype.setResource = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles.prototype.clearResource = function() {
  return this.setResource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles.prototype.hasResource = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ScopeProfiles scope_profiles = 2;
 * @return {!Array<!proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles>}
 */
proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles.prototype.getScopeProfilesList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles, 2));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles>} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles} returns this
*/
proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles.prototype.setScopeProfilesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles}
 */
proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles.prototype.addScopeProfiles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles.prototype.clearScopeProfilesList = function() {
  return this.setScopeProfilesList([]);
};


/**
 * optional string schema_url = 3;
 * @return {string}
 */
proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles.prototype.getSchemaUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.ResourceProfiles.prototype.setSchemaUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles.toObject = function(includeInstance, msg) {
  var f, obj = {
    scope: (f = msg.getScope()) && opentelemetry_proto_common_v1_common_pb.InstrumentationScope.toObject(includeInstance, f),
    profilesList: jspb.Message.toObjectList(msg.getProfilesList(),
    proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer.toObject, includeInstance),
    schemaUrl: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles}
 */
proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles;
  return proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles}
 */
proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new opentelemetry_proto_common_v1_common_pb.InstrumentationScope;
      reader.readMessage(value,opentelemetry_proto_common_v1_common_pb.InstrumentationScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    case 2:
      var value = new proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer;
      reader.readMessage(value,proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer.deserializeBinaryFromReader);
      msg.addProfiles(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchemaUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScope();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      opentelemetry_proto_common_v1_common_pb.InstrumentationScope.serializeBinaryToWriter
    );
  }
  f = message.getProfilesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer.serializeBinaryToWriter
    );
  }
  f = message.getSchemaUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional opentelemetry.proto.common.v1.InstrumentationScope scope = 1;
 * @return {?proto.opentelemetry.proto.common.v1.InstrumentationScope}
 */
proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles.prototype.getScope = function() {
  return /** @type{?proto.opentelemetry.proto.common.v1.InstrumentationScope} */ (
    jspb.Message.getWrapperField(this, opentelemetry_proto_common_v1_common_pb.InstrumentationScope, 1));
};


/**
 * @param {?proto.opentelemetry.proto.common.v1.InstrumentationScope|undefined} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles} returns this
*/
proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles.prototype.setScope = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles.prototype.clearScope = function() {
  return this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles.prototype.hasScope = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ProfileContainer profiles = 2;
 * @return {!Array<!proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer>}
 */
proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles.prototype.getProfilesList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer, 2));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer>} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles} returns this
*/
proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles.prototype.setProfilesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer}
 */
proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles.prototype.addProfiles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles.prototype.clearProfilesList = function() {
  return this.setProfilesList([]);
};


/**
 * optional string schema_url = 3;
 * @return {string}
 */
proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles.prototype.getSchemaUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.ScopeProfiles.prototype.setSchemaUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer.toObject = function(includeInstance, msg) {
  var f, obj = {
    profileId: msg.getProfileId_asB64(),
    startTimeUnixNano: jspb.Message.getFieldWithDefault(msg, 2, 0),
    endTimeUnixNano: jspb.Message.getFieldWithDefault(msg, 3, 0),
    attributesList: jspb.Message.toObjectList(msg.getAttributesList(),
    opentelemetry_proto_common_v1_common_pb.KeyValue.toObject, includeInstance),
    droppedAttributesCount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    originalPayloadFormat: jspb.Message.getFieldWithDefault(msg, 6, ""),
    originalPayload: msg.getOriginalPayload_asB64(),
    profile: (f = msg.getProfile()) && opentelemetry_proto_profiles_v1experimental_pprofextended_pb.Profile.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer}
 */
proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer;
  return proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer}
 */
proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProfileId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setStartTimeUnixNano(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setEndTimeUnixNano(value);
      break;
    case 4:
      var value = new opentelemetry_proto_common_v1_common_pb.KeyValue;
      reader.readMessage(value,opentelemetry_proto_common_v1_common_pb.KeyValue.deserializeBinaryFromReader);
      msg.addAttributes(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDroppedAttributesCount(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setOriginalPayloadFormat(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOriginalPayload(value);
      break;
    case 8:
      var value = new opentelemetry_proto_profiles_v1experimental_pprofextended_pb.Profile;
      reader.readMessage(value,opentelemetry_proto_profiles_v1experimental_pprofextended_pb.Profile.deserializeBinaryFromReader);
      msg.setProfile(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProfileId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getStartTimeUnixNano();
  if (f !== 0) {
    writer.writeFixed64(
      2,
      f
    );
  }
  f = message.getEndTimeUnixNano();
  if (f !== 0) {
    writer.writeFixed64(
      3,
      f
    );
  }
  f = message.getAttributesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      opentelemetry_proto_common_v1_common_pb.KeyValue.serializeBinaryToWriter
    );
  }
  f = message.getDroppedAttributesCount();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getOriginalPayloadFormat();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getOriginalPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getProfile();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      opentelemetry_proto_profiles_v1experimental_pprofextended_pb.Profile.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes profile_id = 1;
 * @return {string}
 */
proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer.prototype.getProfileId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes profile_id = 1;
 * This is a type-conversion wrapper around `getProfileId()`
 * @return {string}
 */
proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer.prototype.getProfileId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProfileId()));
};


/**
 * optional bytes profile_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProfileId()`
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer.prototype.getProfileId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProfileId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer.prototype.setProfileId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional fixed64 start_time_unix_nano = 2;
 * @return {number}
 */
proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer.prototype.getStartTimeUnixNano = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer.prototype.setStartTimeUnixNano = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed64 end_time_unix_nano = 3;
 * @return {number}
 */
proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer.prototype.getEndTimeUnixNano = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer.prototype.setEndTimeUnixNano = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated opentelemetry.proto.common.v1.KeyValue attributes = 4;
 * @return {!Array<!proto.opentelemetry.proto.common.v1.KeyValue>}
 */
proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer.prototype.getAttributesList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.common.v1.KeyValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, opentelemetry_proto_common_v1_common_pb.KeyValue, 4));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.common.v1.KeyValue>} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer} returns this
*/
proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer.prototype.setAttributesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.opentelemetry.proto.common.v1.KeyValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.common.v1.KeyValue}
 */
proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer.prototype.addAttributes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.opentelemetry.proto.common.v1.KeyValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer.prototype.clearAttributesList = function() {
  return this.setAttributesList([]);
};


/**
 * optional uint32 dropped_attributes_count = 5;
 * @return {number}
 */
proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer.prototype.getDroppedAttributesCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer.prototype.setDroppedAttributesCount = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string original_payload_format = 6;
 * @return {string}
 */
proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer.prototype.getOriginalPayloadFormat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer.prototype.setOriginalPayloadFormat = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional bytes original_payload = 7;
 * @return {string}
 */
proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer.prototype.getOriginalPayload = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes original_payload = 7;
 * This is a type-conversion wrapper around `getOriginalPayload()`
 * @return {string}
 */
proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer.prototype.getOriginalPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOriginalPayload()));
};


/**
 * optional bytes original_payload = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOriginalPayload()`
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer.prototype.getOriginalPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOriginalPayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer.prototype.setOriginalPayload = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional Profile profile = 8;
 * @return {?proto.opentelemetry.proto.profiles.v1experimental.Profile}
 */
proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer.prototype.getProfile = function() {
  return /** @type{?proto.opentelemetry.proto.profiles.v1experimental.Profile} */ (
    jspb.Message.getWrapperField(this, opentelemetry_proto_profiles_v1experimental_pprofextended_pb.Profile, 8));
};


/**
 * @param {?proto.opentelemetry.proto.profiles.v1experimental.Profile|undefined} value
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer} returns this
*/
proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer.prototype.setProfile = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer} returns this
 */
proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer.prototype.clearProfile = function() {
  return this.setProfile(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.profiles.v1experimental.ProfileContainer.prototype.hasProfile = function() {
  return jspb.Message.getField(this, 8) != null;
};


goog.object.extend(exports, proto.opentelemetry.proto.profiles.v1experimental);
